<?xml version="1.0" encoding="utf-8"?>
<container>
  <testcase id="199231" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 bit_shift.c bit_shift_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Bit shift bigger than integral type or negative<br>Description: Defect Code to identify bit shift errors<br>]]></description>
    <association type="pair" testcaseid="199232"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/231/bit_shift.c" language="C" size="6431" checksum="7c6c9de856b520ba92b10fe40559e3448b85d070">
      <flaw line="21" name="CWE-189: Numeric Errors"/>
      <flaw line="45" name="CWE-189: Numeric Errors"/>
      <flaw line="69" name="CWE-189: Numeric Errors"/>
      <flaw line="81" name="CWE-189: Numeric Errors"/>
      <flaw line="93" name="CWE-189: Numeric Errors"/>
      <flaw line="106" name="CWE-189: Numeric Errors"/>
      <flaw line="120" name="CWE-189: Numeric Errors"/>
      <flaw line="133" name="CWE-189: Numeric Errors"/>
      <flaw line="146" name="CWE-189: Numeric Errors"/>
      <flaw line="163" name="CWE-189: Numeric Errors"/>
      <flaw line="175" name="CWE-189: Numeric Errors"/>
      <flaw line="193" name="CWE-189: Numeric Errors"/>
      <flaw line="208" name="CWE-189: Numeric Errors"/>
      <flaw line="225" name="CWE-189: Numeric Errors"/>
      <flaw line="236" name="CWE-189: Numeric Errors"/>
    </file>
    <file path="000/199/231/bit_shift_main.c" language="C" size="883" checksum="41ca6c148b61d2b88eb36aa0b447e208dd0162b3"/>
  </testcase>
  <testcase id="199232" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 bit_shift.c bit_shift_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Bit shift bigger than integral type or negative<br>Description: Defect Free Code to identify false positives in bit shift errors<br>]]></description>
    <association type="pair" testcaseid="199231"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/232/bit_shift.c" language="C" size="6601" checksum="758ba6165191267cbf71a5c3a9aeb3f3f6ab41ba">
      <fix line="21" name="CWE-189: Numeric Errors"/>
      <fix line="33" name="CWE-189: Numeric Errors"/>
      <fix line="45" name="CWE-189: Numeric Errors"/>
      <fix line="57" name="CWE-189: Numeric Errors"/>
      <fix line="69" name="CWE-189: Numeric Errors"/>
      <fix line="81" name="CWE-189: Numeric Errors"/>
      <fix line="93" name="CWE-189: Numeric Errors"/>
      <fix line="106" name="CWE-189: Numeric Errors"/>
      <fix line="120" name="CWE-189: Numeric Errors"/>
      <fix line="133" name="CWE-189: Numeric Errors"/>
      <fix line="146" name="CWE-189: Numeric Errors"/>
      <fix line="163" name="CWE-189: Numeric Errors"/>
      <fix line="175" name="CWE-189: Numeric Errors"/>
      <fix line="193" name="CWE-189: Numeric Errors"/>
      <fix line="208" name="CWE-189: Numeric Errors"/>
      <fix line="225" name="CWE-189: Numeric Errors"/>
      <fix line="236" name="CWE-189: Numeric Errors"/>
    </file>
    <file path="000/199/231/bit_shift_main.c" language="C" size="883" checksum="41ca6c148b61d2b88eb36aa0b447e208dd0162b3"/>
  </testcase>
  <testcase id="199233" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 buffer_overrun_dynamic.c buffer_overrun_dynamic_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Dynamic buffer overrun<br>Created on: Sep 27, 2012<br>Author: caesaru01<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file buffer_overrun_dynamic.c:<br>* line(s): 145,151,153,173,434,511,513,550,558 CWE-476<br>* line(s): 332 CWE-121<br>* line(s): 476,492 CWE-704<br>* line(s): 495 CWE-468<br>* line(s): 606 CWE-823<br>]]></description>
    <association type="pair" testcaseid="199234"/>
    <file path="000/199/233/buffer_overrun_dynamic_main.c" language="C" size="785" checksum="d37783fa70abfd43209b4c79051ef18323809c25"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/233/buffer_overrun_dynamic.c" language="C" size="14454" checksum="91b8c5c23d437b003af6faaf26edd984be1a6eca">
      <flaw line="26" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="41" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="61" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="76" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="93" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="111" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="129" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="145" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="151" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="151" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="153" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="173" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="173" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="197" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="217" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="232" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="247" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="262" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="277" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="297" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="311" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="332" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="332" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="349" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="368" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="386" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="402" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="421" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="434" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="434" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="461" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="476" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="479" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="492" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="495" name="CWE-468: Incorrect Pointer Scaling"/>
      <flaw line="495" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="511" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="513" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="513" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="531" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="550" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="558" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="558" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="579" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="606" name="CWE-823: Use of Out-of-range Pointer Offset"/>
      <flaw line="606" name="CWE-122: Heap-based Buffer Overflow"/>
    </file>
  </testcase>
  <testcase id="199234" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 buffer_overrun_dynamic.c buffer_overrun_dynamic_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Dynamic buffer overrun<br>Description: Defect Free Code to identify false positives in dynamic buffer overrun<br>Created on: Sep 27, 2012<br>Author: caesaru01<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file buffer_overrun_dynamic.c:<br>* line(s): 433,510,512,549,557 CWE-476<br>* line(s): 475,491 CWE-704<br>* line(s): 494 CWE-468<br>]]></description>
    <association type="pair" testcaseid="199233"/>
    <file path="000/199/234/buffer_overrun_dynamic.c" language="C" size="14729" checksum="5dbe4ad001546e2be6271ee121ccf515daf09e4c">
      <fix line="25" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="40" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="60" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="75" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="92" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="110" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="128" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="150" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="172" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="196" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="216" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="231" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="246" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="261" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="276" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="296" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="310" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="331" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="348" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="367" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="385" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="401" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="420" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="433" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="433" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="460" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="475" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="478" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="491" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="494" name="CWE-468: Incorrect Pointer Scaling"/>
      <fix line="494" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="510" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="512" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="512" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="530" name="CWE-122: Heap-based Buffer Overflow"/>
      <flaw line="549" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="557" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="557" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="578" name="CWE-122: Heap-based Buffer Overflow"/>
      <fix line="606" name="CWE-122: Heap-based Buffer Overflow"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/233/buffer_overrun_dynamic_main.c" language="C" size="785" checksum="d37783fa70abfd43209b4c79051ef18323809c25"/>
  </testcase>
  <testcase id="199235" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 buffer_underrun_dynamic.c buffer_overrun_dynamic_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Dynamic buffer underrun<br>Created on: Sep 27, 2012<br>Author: caesaru01<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file buffer_underrun_dynamic.c:<br>* line(s): 148,154,177,516,518,550,558,668,673,678 CWE-476<br>* line(s): 159 CWE-401<br>* line(s): 177,221 CWE-468<br>* line(s): 482,498 CWE-704<br>* line(s): 620,673 CWE-124<br>]]></description>
    <association type="pair" testcaseid="199236"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/233/buffer_overrun_dynamic_main.c" language="C" size="785" checksum="d37783fa70abfd43209b4c79051ef18323809c25"/>
    <file path="000/199/235/buffer_underrun_dynamic.c" language="C" size="18727" checksum="9e93811542ae79b0d3a45693d76b558b57650f7c">
      <flaw line="28" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="44" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="64" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="79" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="96" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="114" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="132" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="148" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="154" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="154" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="159" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="177" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="177" name="CWE-468: Incorrect Pointer Scaling"/>
      <flaw line="177" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="201" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="221" name="CWE-468: Incorrect Pointer Scaling"/>
      <flaw line="221" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="236" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="252" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="267" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="282" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="302" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="316" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="337" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="354" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="373" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="391" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="407" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="426" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="438" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="465" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="482" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="483" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="498" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="499" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="516" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="518" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="518" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="531" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="550" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="558" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="558" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="579" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="605" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="620" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="623" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="647" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="668" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="673" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="673" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="678" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="678" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="700" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="720" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="750" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
    </file>
  </testcase>
  <testcase id="199236" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 buffer_underrun_dynamic.c buffer_overrun_dynamic_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Dynamic buffer underrun<br>Description: Defect Free Code to identify false positives in buffer underrun in dynamic memory allocation<br>Created on: Sep 27, 2012<br>Author: caesaru01<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file buffer_underrun_dynamic.c:<br>* line(s): 145,151,173,512,514,547,555,669,674,679 CWE-476<br>* line(s): 478,494 CWE-704<br>]]></description>
    <association type="pair" testcaseid="199235"/>
    <file path="000/199/236/buffer_underrun_dynamic.c" language="C" size="19047" checksum="62ced573226f1f546e861cabbba526fe450cd3cf">
      <fix line="26" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="41" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="61" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="76" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="93" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="111" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="129" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="145" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="151" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="151" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="173" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="173" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="197" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="217" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="232" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="248" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="263" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="278" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="298" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="312" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="333" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="350" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="369" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="387" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="403" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="422" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="434" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="461" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="478" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="479" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="494" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="495" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="512" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="514" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="514" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="528" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="547" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="555" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="555" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="576" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="602" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="624" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="648" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="669" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="674" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="679" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="679" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="699" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="719" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="749" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="776" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/233/buffer_overrun_dynamic_main.c" language="C" size="785" checksum="d37783fa70abfd43209b4c79051ef18323809c25"/>
  </testcase>
  <testcase id="199237" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 cmp_funcadr.c cmp_funcadr_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Comparison NULL with function pointer<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file cmp_funcadr.c:<br>* line(s): 28,50 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199238"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/237/cmp_funcadr.c" language="C" size="1435" checksum="b2eac4474d14e10c87836b4ffd8a0e10450f3bdf">
      <flaw line="26" name="CWE-480: Use of Incorrect Operator"/>
      <flaw line="28" name="CWE-561: Dead Code"/>
      <flaw line="48" name="CWE-480: Use of Incorrect Operator"/>
      <flaw line="50" name="CWE-561: Dead Code"/>
    </file>
    <file path="000/199/237/cmp_funcadr_main.c" language="C" size="910" checksum="be11147221104cd8fb0718a495ec2a6d09c4a361"/>
  </testcase>
  <testcase id="199238" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 cmp_funcadr.c cmp_funcadr_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Comparison NULL with function pointer<br>Description: Defect Free Code to identify false positives while comparison of NULL with function pointers<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file cmp_funcadr.c:<br>* line(s): 27 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199237"/>
    <file path="000/199/237/cmp_funcadr_main.c" language="C" size="910" checksum="be11147221104cd8fb0718a495ec2a6d09c4a361"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/238/cmp_funcadr.c" language="C" size="1472" checksum="9f1dddccc9a4245eae9cfa431994e661bebb81d7">
      <fix line="25" name="CWE-480: Use of Incorrect Operator"/>
      <flaw line="27" name="CWE-561: Dead Code"/>
      <fix line="46" name="CWE-480: Use of Incorrect Operator"/>
    </file>
  </testcase>
  <testcase id="199239" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 conflicting_cond.c conflicting_cond_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Contradict conditions<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file conflicting_cond.c:<br>* line(s): 26,45,64,85,120,139,159,179 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199240"/>
    <file path="000/199/239/conflicting_cond.c" language="C" size="4220" checksum="f863221a57c85070f6e951f9f0b5cfa02a920145">
      <flaw line="24" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="26" name="CWE-561: Dead Code"/>
      <flaw line="43" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="45" name="CWE-561: Dead Code"/>
      <flaw line="62" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="64" name="CWE-561: Dead Code"/>
      <flaw line="83" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="85" name="CWE-561: Dead Code"/>
      <flaw line="103" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="118" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="120" name="CWE-561: Dead Code"/>
      <flaw line="137" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="139" name="CWE-561: Dead Code"/>
      <flaw line="157" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="159" name="CWE-561: Dead Code"/>
      <flaw line="177" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="179" name="CWE-561: Dead Code"/>
      <flaw line="199" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
    <file path="000/199/239/conflicting_cond_main.c" language="C" size="896" checksum="fa7fead8cbdca43d05e3fb095931204b208e3803"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199240" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 conflicting_cond.c conflicting_cond_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Contradict conditions<br>Description: Defect Free Code to identify false positives occurring in contradicting conditions<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file conflicting_cond.c:<br>* line(s): 104 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199239"/>
    <file path="000/199/240/conflicting_cond.c" language="C" size="4528" checksum="8fe3631ecf87af6ab4d661f99083b2cd9b2c2f33">
      <fix line="24" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="43" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="62" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="84" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="104" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="104" name="CWE-561: Dead Code"/>
      <fix line="119" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="138" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="158" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="178" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="200" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/239/conflicting_cond_main.c" language="C" size="896" checksum="fa7fead8cbdca43d05e3fb095931204b208e3803"/>
  </testcase>
  <testcase id="199241" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 data_lost.c data_lost_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Integer precision lost because of cast<br>Description: Defect Code to identify defects in data lost at cast<br>]]></description>
    <association type="pair" testcaseid="199242"/>
    <file path="000/199/241/data_lost.c" language="C" size="8104" checksum="dc5346b33dd94178ce9866a0fe796addd321993a">
      <flaw line="21" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="33" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="45" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="57" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="69" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="81" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="93" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="105" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="117" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="134" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="144" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="157" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="169" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="181" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="197" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="208" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="225" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="239" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="255" name="CWE-197: Numeric Truncation Error"/>
    </file>
    <file path="000/199/241/data_lost_main.c" language="C" size="925" checksum="bf459d6393e2a9764b4150051f2386013adfe825"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199242" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 data_lost.c data_lost_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Integer precision lost because of cast<br>Description: Defect Free Code to identify false positives in data lost at cast<br>]]></description>
    <association type="pair" testcaseid="199241"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/241/data_lost_main.c" language="C" size="925" checksum="bf459d6393e2a9764b4150051f2386013adfe825"/>
    <file path="000/199/242/data_lost.c" language="C" size="8312" checksum="8a9c2d47bcd3917668a448e37cd854bfcbea08f6">
      <fix line="23" name="CWE-197: Numeric Truncation Error"/>
      <fix line="35" name="CWE-197: Numeric Truncation Error"/>
      <fix line="47" name="CWE-197: Numeric Truncation Error"/>
      <fix line="59" name="CWE-197: Numeric Truncation Error"/>
      <fix line="71" name="CWE-197: Numeric Truncation Error"/>
      <fix line="84" name="CWE-197: Numeric Truncation Error"/>
      <fix line="96" name="CWE-197: Numeric Truncation Error"/>
      <fix line="107" name="CWE-197: Numeric Truncation Error"/>
      <fix line="120" name="CWE-197: Numeric Truncation Error"/>
      <fix line="137" name="CWE-197: Numeric Truncation Error"/>
      <fix line="146" name="CWE-197: Numeric Truncation Error"/>
      <fix line="160" name="CWE-197: Numeric Truncation Error"/>
      <fix line="173" name="CWE-197: Numeric Truncation Error"/>
      <fix line="184" name="CWE-197: Numeric Truncation Error"/>
      <fix line="200" name="CWE-197: Numeric Truncation Error"/>
      <fix line="211" name="CWE-197: Numeric Truncation Error"/>
      <fix line="228" name="CWE-197: Numeric Truncation Error"/>
      <fix line="242" name="CWE-197: Numeric Truncation Error"/>
      <fix line="258" name="CWE-197: Numeric Truncation Error"/>
    </file>
  </testcase>
  <testcase id="199243" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 data_overflow.c data_overflow_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Data overflow<br>Description: Defect Code to identify defects in data overflow in static declaration<br>]]></description>
    <association type="pair" testcaseid="199244"/>
    <file path="000/199/243/data_overflow_main.c" language="C" size="878" checksum="e92f57bbbbd84548667404b2f131eec869e7e4fe"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/243/data_overflow.c" language="C" size="9134" checksum="c1352ff34b0651dc8fbe1854b81c8327e72c1131">
      <flaw line="24" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="36" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="48" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="60" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="72" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="84" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="96" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="108" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="125" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="141" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="153" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="165" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="177" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="190" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="204" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="216" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="228" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="245" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="257" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="275" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="290" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="307" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="318" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="334" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="350" name="CWE-190: Integer Overflow or Wraparound"/>
    </file>
  </testcase>
  <testcase id="199244" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 data_overflow.c data_overflow_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Data overflow<br>Description: Defect Free Code to identify false positives in data overflow in static declaration<br>]]></description>
    <association type="pair" testcaseid="199243"/>
    <file path="000/199/243/data_overflow_main.c" language="C" size="878" checksum="e92f57bbbbd84548667404b2f131eec869e7e4fe"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/244/data_overflow.c" language="C" size="9499" checksum="7d59a7f44362f3b78244bba8ebe7ebbad7d1502d">
      <fix line="24" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="36" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="49" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="61" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="73" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="85" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="97" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="109" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="126" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="142" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="154" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="166" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="178" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="191" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="205" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="217" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="229" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="246" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="258" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="276" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="291" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="308" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="319" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="335" name="CWE-190: Integer Overflow or Wraparound"/>
      <fix line="351" name="CWE-190: Integer Overflow or Wraparound"/>
    </file>
  </testcase>
  <testcase id="199245" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 data_underflow.c data_underflow_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Data underflow<br>Description: Defect Code to identify defects in data underflow in static declaration<br>]]></description>
    <association type="pair" testcaseid="199246"/>
    <file path="000/199/245/data_underflow_main.c" language="C" size="880" checksum="b377efee71ce39cb0d21544d3025c183fa01a15c"/>
    <file path="000/199/245/data_underflow.c" language="C" size="4659" checksum="57e7e06b1d1da6d488897af42e7df5e3b4d9b498">
      <flaw line="20" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="32" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="46" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="58" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="70" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="81" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="96" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="111" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="123" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="140" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="152" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <flaw line="170" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199246" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 data_underflow.c data_underflow_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Data underflow<br>Description: Defect Free Code to identify false positives in data underflow in static declaration<br>]]></description>
    <association type="pair" testcaseid="199245"/>
    <file path="000/199/245/data_underflow_main.c" language="C" size="880" checksum="b377efee71ce39cb0d21544d3025c183fa01a15c"/>
    <file path="000/199/246/data_underflow.c" language="C" size="4798" checksum="391636c617332b901cb4bab22eb9730226583cbf">
      <fix line="19" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="31" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="45" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="57" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="69" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="80" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="95" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="110" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="122" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="139" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="151" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
      <fix line="169" name="CWE-191: Integer Underflow (Wrap or Wraparound)"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199247" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 dead_code.c dead_code_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Dead code<br>Description: Defect Code to identify defects in dead code<br>]]></description>
    <association type="pair" testcaseid="199248"/>
    <file path="000/199/247/dead_code.c" language="C" size="4864" checksum="bf669ae4d6d25835111a9fea4b4797ecdabb7d4c">
      <flaw line="23" name="CWE-561: Dead Code"/>
      <flaw line="40" name="CWE-561: Dead Code"/>
      <flaw line="61" name="CWE-561: Dead Code"/>
      <flaw line="77" name="CWE-561: Dead Code"/>
      <flaw line="99" name="CWE-561: Dead Code"/>
      <flaw line="116" name="CWE-561: Dead Code"/>
      <flaw line="133" name="CWE-561: Dead Code"/>
      <flaw line="150" name="CWE-561: Dead Code"/>
      <flaw line="168" name="CWE-561: Dead Code"/>
      <flaw line="190" name="CWE-561: Dead Code"/>
      <flaw line="207" name="CWE-561: Dead Code"/>
      <flaw line="230" name="CWE-561: Dead Code"/>
      <flaw line="248" name="CWE-561: Dead Code"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/247/dead_code_main.c" language="C" size="888" checksum="e8bccdd468e8e783e16f28e6846cb61edb154967"/>
  </testcase>
  <testcase id="199248" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 dead_code.c dead_code_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Dead code<br>Description: Defect Free Code to identify false positives in dead code<br>]]></description>
    <association type="pair" testcaseid="199247"/>
    <file path="000/199/247/dead_code_main.c" language="C" size="888" checksum="e8bccdd468e8e783e16f28e6846cb61edb154967"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/248/dead_code.c" language="C" size="4970" checksum="d48d859e5d2e075ed1f78bab6d7c16180268928d">
      <fix line="21" name="CWE-561: Dead Code"/>
      <fix line="38" name="CWE-561: Dead Code"/>
      <fix line="59" name="CWE-561: Dead Code"/>
      <fix line="75" name="CWE-561: Dead Code"/>
      <fix line="97" name="CWE-561: Dead Code"/>
      <fix line="114" name="CWE-561: Dead Code"/>
      <fix line="131" name="CWE-561: Dead Code"/>
      <fix line="148" name="CWE-561: Dead Code"/>
      <fix line="166" name="CWE-561: Dead Code"/>
      <fix line="188" name="CWE-561: Dead Code"/>
      <fix line="205" name="CWE-561: Dead Code"/>
      <fix line="228" name="CWE-561: Dead Code"/>
      <fix line="246" name="CWE-561: Dead Code"/>
    </file>
  </testcase>
  <testcase id="199249" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 dead_lock.c dead_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Dead lock<br>]]></description>
    <association type="pair" testcaseid="199250"/>
    <file path="000/199/249/dead_lock.c" language="C" size="21324" checksum="578b5de408e335a2dcffbcfff4c3620e9109915e">
      <flaw line="62" name="CWE-833: Deadlock"/>
      <flaw line="196" name="CWE-833: Deadlock"/>
      <flaw line="345" name="CWE-833: Deadlock"/>
      <flaw line="502" name="CWE-833: Deadlock"/>
      <flaw line="629" name="CWE-833: Deadlock"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/249/dead_lock_main.c" language="C" size="877" checksum="c03562c985c97d71de34b8a5a86bb8a507c0ae94"/>
  </testcase>
  <testcase id="199250" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 dead_lock.c dead_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Dead lock<br>Description: Defect Free Code to identify false positives in dead lock conditions<br>]]></description>
    <association type="pair" testcaseid="199249"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/249/dead_lock_main.c" language="C" size="877" checksum="c03562c985c97d71de34b8a5a86bb8a507c0ae94"/>
    <file path="000/199/250/dead_lock.c" language="C" size="21416" checksum="6c4ef061ed9a6f1f9ae769a5596a259a7b6466a9">
      <fix line="61" name="CWE-833: Deadlock"/>
      <fix line="193" name="CWE-833: Deadlock"/>
      <fix line="342" name="CWE-833: Deadlock"/>
      <fix line="499" name="CWE-833: Deadlock"/>
      <fix line="622" name="CWE-833: Deadlock"/>
    </file>
  </testcase>
  <testcase id="199251" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 deletion_of_data_structure_sentinel.c deletion_of_data_structure_sentinel_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Deletion of data structure sentinel<br>Description: Defect Code to identify defects while deletion of data structure sentinel<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file deletion_of_data_structure_sentinel.c:<br>* line(s): 25 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199252"/>
    <file path="000/199/251/deletion_of_data_structure_sentinel.c" language="C" size="1958" checksum="dd5410aa7b17cfd55987e0ecdb6a79e74534feb2">
      <flaw line="25" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="25" name="CWE-463: Deletion of Data Structure Sentinel"/>
      <flaw line="40" name="CWE-463: Deletion of Data Structure Sentinel"/>
      <flaw line="61" name="CWE-463: Deletion of Data Structure Sentinel"/>
    </file>
    <file path="000/199/251/deletion_of_data_structure_sentinel_main.c" language="C" size="925" checksum="840c18ce7e4ad38f903fb1739ff4154daed0c040"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199252" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 deletion_of_data_structure_sentinel.c deletion_of_data_structure_sentinel_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Deletion of data structure sentinel<br>Description: Defect Free Code to identify false positives while deletion of data structure sentinel<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file deletion_of_data_structure_sentinel.c:<br>* line(s): 25 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199251"/>
    <file path="000/199/251/deletion_of_data_structure_sentinel_main.c" language="C" size="925" checksum="840c18ce7e4ad38f903fb1739ff4154daed0c040"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/252/deletion_of_data_structure_sentinel.c" language="C" size="2001" checksum="5f5e38c524b3d1d029739086381d996170e3ec26">
      <flaw line="25" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="25" name="CWE-463: Deletion of Data Structure Sentinel"/>
      <fix line="40" name="CWE-463: Deletion of Data Structure Sentinel"/>
      <fix line="61" name="CWE-463: Deletion of Data Structure Sentinel"/>
    </file>
  </testcase>
  <testcase id="199253" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 double_free.c double_free_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Double free<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file double_free.c:<br>* line(s): 37,78 CWE-476<br>* line(s): 88 CWE-401<br>]]></description>
    <association type="pair" testcaseid="199254"/>
    <file path="000/199/253/double_free.c" language="C" size="4895" checksum="baa3a0aea38ca16ba2f817dd6a3ad485994672ed">
      <flaw line="22" name="CWE-415: Double Free"/>
      <flaw line="37" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="43" name="CWE-415: Double Free"/>
      <flaw line="58" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="64" name="CWE-415: Double Free"/>
      <flaw line="78" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="87" name="CWE-415: Double Free"/>
      <flaw line="88" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="101" name="CWE-415: Double Free"/>
      <flaw line="115" name="CWE-415: Double Free"/>
      <flaw line="131" name="CWE-415: Double Free"/>
      <flaw line="149" name="CWE-415: Double Free"/>
      <flaw line="168" name="CWE-415: Double Free"/>
      <flaw line="187" name="CWE-415: Double Free"/>
      <flaw line="204" name="CWE-415: Double Free"/>
      <flaw line="222" name="CWE-415: Double Free"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/253/double_free_main.c" language="C" size="881" checksum="416ea3ba05ab87ebbbaff8a6c6b44aed0451cddb"/>
  </testcase>
  <testcase id="199254" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 double_free.c double_free_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Double free<br>Description: Defect Free Code to identify false positives in double free - resource management defects<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file double_free.c:<br>* line(s): 36,55,73 CWE-476<br>* line(s): 38,101,117 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199253"/>
    <file path="000/199/253/double_free_main.c" language="C" size="881" checksum="416ea3ba05ab87ebbbaff8a6c6b44aed0451cddb"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/254/double_free.c" language="C" size="4910" checksum="3493d373871b174c92d5adc3163e069cb417aaf3">
      <fix line="21" name="CWE-415: Double Free"/>
      <flaw line="36" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="38" name="CWE-561: Dead Code"/>
      <fix line="40" name="CWE-415: Double Free"/>
      <flaw line="55" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="59" name="CWE-415: Double Free"/>
      <flaw line="73" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="76" name="CWE-415: Double Free"/>
      <fix line="89" name="CWE-415: Double Free"/>
      <flaw line="101" name="CWE-561: Dead Code"/>
      <fix line="103" name="CWE-415: Double Free"/>
      <flaw line="117" name="CWE-561: Dead Code"/>
      <fix line="119" name="CWE-415: Double Free"/>
      <fix line="129" name="CWE-415: Double Free"/>
      <fix line="171" name="CWE-415: Double Free"/>
      <fix line="186" name="CWE-415: Double Free"/>
      <fix line="190" name="CWE-415: Double Free"/>
      <fix line="222" name="CWE-415: Double Free"/>
    </file>
  </testcase>
  <testcase id="199255" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 double_lock.c double_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Double lock<br>]]></description>
    <association type="pair" testcaseid="199256"/>
    <file path="000/199/255/double_lock_main.c" language="C" size="880" checksum="a9156d102e4e01dc6e117e84fa00b6134829bbc7"/>
    <file path="000/199/255/double_lock.c" language="C" size="6359" checksum="001d49fad50b3bd5096adb9ffd7a71d76bd13c01">
      <flaw line="42" name="CWE-667: Improper Locking"/>
      <flaw line="94" name="CWE-667: Improper Locking"/>
      <flaw line="141" name="CWE-667: Improper Locking"/>
      <flaw line="209" name="CWE-667: Improper Locking"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199256" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 double_lock.c double_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Double lock<br>Description: Defect Free Code to identify false positives in double lock - concurrency defects<br>]]></description>
    <association type="pair" testcaseid="199255"/>
    <file path="000/199/256/double_lock.c" language="C" size="6625" checksum="488ae65890ec87449345997940dd6b83aecd250a">
      <fix line="44" name="CWE-667: Improper Locking"/>
      <fix line="95" name="CWE-667: Improper Locking"/>
      <fix line="142" name="CWE-667: Improper Locking"/>
      <fix line="212" name="CWE-667: Improper Locking"/>
    </file>
    <file path="000/199/255/double_lock_main.c" language="C" size="880" checksum="a9156d102e4e01dc6e117e84fa00b6134829bbc7"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199257" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 double_release.c double_release_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Double release<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file double_release.c:<br>* line(s): 24,25,50,70,71,101,118,119,147,164,165,192,213,214,241,260,261,288 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199258"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/257/double_release_main.c" language="C" size="886" checksum="605a847ca5ea050edbac886d1e527644fbdb346e"/>
    <file path="000/199/257/double_release.c" language="C" size="8501" checksum="551d745ab1e8e37a0920f714e75124ec20129467">
      <flaw line="24" name="CWE-561: Dead Code"/>
      <flaw line="25" name="CWE-561: Dead Code"/>
      <flaw line="35" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="50" name="CWE-561: Dead Code"/>
      <flaw line="70" name="CWE-561: Dead Code"/>
      <flaw line="71" name="CWE-561: Dead Code"/>
      <flaw line="86" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="101" name="CWE-561: Dead Code"/>
      <flaw line="118" name="CWE-561: Dead Code"/>
      <flaw line="119" name="CWE-561: Dead Code"/>
      <flaw line="133" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="147" name="CWE-561: Dead Code"/>
      <flaw line="164" name="CWE-561: Dead Code"/>
      <flaw line="165" name="CWE-561: Dead Code"/>
      <flaw line="178" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="192" name="CWE-561: Dead Code"/>
      <flaw line="213" name="CWE-561: Dead Code"/>
      <flaw line="214" name="CWE-561: Dead Code"/>
      <flaw line="226" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="241" name="CWE-561: Dead Code"/>
      <flaw line="260" name="CWE-561: Dead Code"/>
      <flaw line="261" name="CWE-561: Dead Code"/>
      <flaw line="283" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="288" name="CWE-561: Dead Code"/>
    </file>
  </testcase>
  <testcase id="199258" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 double_release.c double_release_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Double release<br>Description: Defect Free Code to identify false positives in double release - concurrency defects<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file double_release.c:<br>* line(s): 24,25,48,68,69,101,120,121,149,168,169,196,217,218,245,263,264,287 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199257"/>
    <file path="000/199/257/double_release_main.c" language="C" size="886" checksum="605a847ca5ea050edbac886d1e527644fbdb346e"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/258/double_release.c" language="C" size="8624" checksum="a687e4bb5a93c106466c0bd05f15d33bf4bfb5e3">
      <flaw line="24" name="CWE-561: Dead Code"/>
      <flaw line="25" name="CWE-561: Dead Code"/>
      <fix line="34" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="48" name="CWE-561: Dead Code"/>
      <flaw line="68" name="CWE-561: Dead Code"/>
      <flaw line="69" name="CWE-561: Dead Code"/>
      <fix line="78" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="101" name="CWE-561: Dead Code"/>
      <flaw line="120" name="CWE-561: Dead Code"/>
      <flaw line="121" name="CWE-561: Dead Code"/>
      <fix line="135" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="149" name="CWE-561: Dead Code"/>
      <flaw line="168" name="CWE-561: Dead Code"/>
      <flaw line="169" name="CWE-561: Dead Code"/>
      <fix line="181" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="196" name="CWE-561: Dead Code"/>
      <flaw line="217" name="CWE-561: Dead Code"/>
      <flaw line="218" name="CWE-561: Dead Code"/>
      <fix line="230" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="245" name="CWE-561: Dead Code"/>
      <flaw line="263" name="CWE-561: Dead Code"/>
      <flaw line="264" name="CWE-561: Dead Code"/>
      <fix line="273" name="CWE-765: Multiple Unlocks of a Critical Resource"/>
      <flaw line="287" name="CWE-561: Dead Code"/>
    </file>
  </testcase>
  <testcase id="199259" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 endless_loop.c endless_loop_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Unintentional end less loop<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file endless_loop.c:<br>* line(s): 24,41,57,74,95,111,133,150,166 CWE-190<br>* line(s): 26,43,59,76,97,113,135,152,169 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199260"/>
    <file path="000/199/259/endless_loop_main.c" language="C" size="897" checksum="d728419e8925823ed2c42af8b2a5b435d8f78d60"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/259/endless_loop.c" language="C" size="3682" checksum="6cc9dac6641971c894588d25e8bc7f6de09d6459">
      <flaw line="24" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="24" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="26" name="CWE-561: Dead Code"/>
      <flaw line="41" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="41" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="43" name="CWE-561: Dead Code"/>
      <flaw line="57" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="57" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="59" name="CWE-561: Dead Code"/>
      <flaw line="74" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="74" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="76" name="CWE-561: Dead Code"/>
      <flaw line="95" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="95" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="97" name="CWE-561: Dead Code"/>
      <flaw line="111" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="111" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="113" name="CWE-561: Dead Code"/>
      <flaw line="133" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="133" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="135" name="CWE-561: Dead Code"/>
      <flaw line="150" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="150" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="152" name="CWE-561: Dead Code"/>
      <flaw line="166" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="166" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="169" name="CWE-561: Dead Code"/>
    </file>
  </testcase>
  <testcase id="199260" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 endless_loop.c endless_loop_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Unintentional end less loop<br>Description: Defect Free Code to identify false positives in unintentional endless looping<br>]]></description>
    <association type="pair" testcaseid="199259"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/259/endless_loop_main.c" language="C" size="897" checksum="d728419e8925823ed2c42af8b2a5b435d8f78d60"/>
    <file path="000/199/260/endless_loop.c" language="C" size="4092" checksum="b74fbbb1977c5d57bdb774a22e384b73740a4565">
      <fix line="24" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="46" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="62" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="83" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="108" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="128" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="154" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="175" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <fix line="195" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
    </file>
  </testcase>
  <testcase id="199261" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 free_nondynamic_allocated_memory.c free_nondynamic_allocated_memory_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Free non dynamically allocated memory<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file free_nondynamic_allocated_memory.c:<br>* line(s): 82,208 CWE-476<br>* line(s): 114,127,140 CWE-835<br>]]></description>
    <association type="pair" testcaseid="199262"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/261/free_nondynamic_allocated_memory.c" language="C" size="8253" checksum="bd1a5e0bd21ebefc34d2c18996337b751f9bf049">
      <flaw line="22" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="36" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="48" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="62" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="82" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="86" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="103" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="114" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="115" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="127" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="128" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="140" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="141" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="155" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="170" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="187" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="208" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="209" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="229" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="239" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="262" name="CWE-590: Free of Memory not on the Heap"/>
    </file>
    <file path="000/199/261/free_nondynamic_allocated_memory_main.c" language="C" size="930" checksum="fd1b99e238c53e94b76bd4c061a622538767ba8c"/>
  </testcase>
  <testcase id="199262" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 free_nondynamic_allocated_memory.c free_nondynamic_allocated_memory_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Free non dynamically allocated memory<br>Description: Defect Free Code to identify false positives while freeing non dynamically allocated memory<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file free_nondynamic_allocated_memory.c:<br>* line(s): 23,35,61,114,127,140,169,187 CWE-561<br>* line(s): 81,208 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199261"/>
    <file path="000/199/262/free_nondynamic_allocated_memory.c" language="C" size="8633" checksum="041dadab2987b2a4e700f26be58fad2e2f859da6">
      <fix line="22" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="23" name="CWE-561: Dead Code"/>
      <fix line="35" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="35" name="CWE-561: Dead Code"/>
      <fix line="47" name="CWE-590: Free of Memory not on the Heap"/>
      <fix line="61" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="61" name="CWE-561: Dead Code"/>
      <flaw line="81" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="84" name="CWE-590: Free of Memory not on the Heap"/>
      <fix line="103" name="CWE-590: Free of Memory not on the Heap"/>
      <fix line="114" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="114" name="CWE-561: Dead Code"/>
      <flaw line="127" name="CWE-561: Dead Code"/>
      <fix line="127" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="140" name="CWE-561: Dead Code"/>
      <fix line="141" name="CWE-590: Free of Memory not on the Heap"/>
      <fix line="154" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="169" name="CWE-561: Dead Code"/>
      <fix line="170" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="187" name="CWE-561: Dead Code"/>
      <fix line="187" name="CWE-590: Free of Memory not on the Heap"/>
      <flaw line="208" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="209" name="CWE-590: Free of Memory not on the Heap"/>
      <fix line="228" name="CWE-590: Free of Memory not on the Heap"/>
      <fix line="238" name="CWE-590: Free of Memory not on the Heap"/>
      <fix line="261" name="CWE-590: Free of Memory not on the Heap"/>
    </file>
    <file path="000/199/261/free_nondynamic_allocated_memory_main.c" language="C" size="930" checksum="fd1b99e238c53e94b76bd4c061a622538767ba8c"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199263" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 free_null_pointer.c free_null_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Free NULL  pointer<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file free_null_pointer.c:<br>* line(s): 54,74,109,144,146,151,241,275,281,282,320,452,483,530,531,532 CWE-476<br>* line(s): 102,124,167,195,215,231,257,306,328,445,481,514,544 CWE-561<br>* line(s): 369,375,381 CWE-591<br>* line(s): 418,420 CWE-587<br>* line(s): 419 CWE-465<br>]]></description>
    <association type="pair" testcaseid="199264"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/263/free_null_pointer.c" language="C" size="13186" checksum="33ba0bb86d4aa2a5a3377e6ac329a8e57e6ae570">
      <flaw line="54" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="74" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="102" name="CWE-561: Dead Code"/>
      <flaw line="109" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="124" name="CWE-561: Dead Code"/>
      <flaw line="144" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="146" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="151" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="167" name="CWE-561: Dead Code"/>
      <flaw line="195" name="CWE-561: Dead Code"/>
      <flaw line="215" name="CWE-561: Dead Code"/>
      <flaw line="231" name="CWE-561: Dead Code"/>
      <flaw line="241" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="257" name="CWE-561: Dead Code"/>
      <flaw line="275" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="281" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="282" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="306" name="CWE-561: Dead Code"/>
      <flaw line="320" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="328" name="CWE-561: Dead Code"/>
      <flaw line="369" name="CWE-591: Sensitive Data Storage in Improperly Locked Memory"/>
      <flaw line="375" name="CWE-591: Sensitive Data Storage in Improperly Locked Memory"/>
      <flaw line="381" name="CWE-591: Sensitive Data Storage in Improperly Locked Memory"/>
      <flaw line="418" name="CWE-587: Assignment of a Fixed Address to a Pointer"/>
      <flaw line="419" name="CWE-465: Pointer Issues"/>
      <flaw line="420" name="CWE-587: Assignment of a Fixed Address to a Pointer"/>
      <flaw line="445" name="CWE-561: Dead Code"/>
      <flaw line="452" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="481" name="CWE-561: Dead Code"/>
      <flaw line="483" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="514" name="CWE-561: Dead Code"/>
      <flaw line="530" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="531" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="532" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="544" name="CWE-561: Dead Code"/>
    </file>
    <file path="000/199/263/free_null_pointer_main.c" language="C" size="892" checksum="b3ac1fa702146f76b0b54085a748669e61f2b1de"/>
  </testcase>
  <testcase id="199264" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 free_null_pointer.c free_null_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Free NULL  pointer<br>Description: Defect Free Code to identify false positives while freeing null pointer<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file free_null_pointer.c:<br>* line(s): 83,92,118,153,155,160,186,192,248,270,283,289,290,313,324,334,370,451,457,488,520,521,522,535,536,537,549,550,551 CWE-476<br>* line(s): 133,204,375,381,386,403,409,414,440,450,451 CWE-561<br>* line(s): 489 CWE-401<br>]]></description>
    <association type="pair" testcaseid="199263"/>
    <file path="000/199/264/free_null_pointer.c" language="C" size="13794" checksum="a4321085fc0315ca494129034ac19f32c94fdbe5">
      <fix line="26" name="CWE-465: Pointer Issues"/>
      <fix line="44" name="CWE-465: Pointer Issues"/>
      <fix line="66" name="CWE-465: Pointer Issues"/>
      <flaw line="83" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="92" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="85" name="CWE-465: Pointer Issues"/>
      <flaw line="118" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="119" name="CWE-465: Pointer Issues"/>
      <flaw line="133" name="CWE-561: Dead Code"/>
      <flaw line="153" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="155" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="160" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="160" name="CWE-465: Pointer Issues"/>
      <flaw line="186" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="192" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="204" name="CWE-561: Dead Code"/>
      <flaw line="248" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="249" name="CWE-465: Pointer Issues"/>
      <flaw line="270" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="283" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="289" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="290" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="292" name="CWE-465: Pointer Issues"/>
      <flaw line="313" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="324" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="334" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="337" name="CWE-465: Pointer Issues"/>
      <flaw line="370" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="375" name="CWE-561: Dead Code"/>
      <flaw line="381" name="CWE-561: Dead Code"/>
      <flaw line="386" name="CWE-561: Dead Code"/>
      <fix line="397" name="CWE-465: Pointer Issues"/>
      <flaw line="403" name="CWE-561: Dead Code"/>
      <flaw line="409" name="CWE-561: Dead Code"/>
      <flaw line="414" name="CWE-561: Dead Code"/>
      <flaw line="440" name="CWE-561: Dead Code"/>
      <flaw line="450" name="CWE-561: Dead Code"/>
      <flaw line="451" name="CWE-561: Dead Code"/>
      <flaw line="451" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="457" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="464" name="CWE-465: Pointer Issues"/>
      <flaw line="488" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="489" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="495" name="CWE-465: Pointer Issues"/>
      <flaw line="520" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="521" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="522" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="535" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="536" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="537" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="549" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="550" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="551" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="550" name="CWE-465: Pointer Issues"/>
    </file>
    <file path="000/199/263/free_null_pointer_main.c" language="C" size="892" checksum="b3ac1fa702146f76b0b54085a748669e61f2b1de"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199265" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 func_pointer.c func_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Bad cast of a function pointer<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file func_pointer.c:<br>* line(s): 101,103,151,157,177,179,180,182,210,216,229,240,241,262,338,352,395,397,438,443,560,561,601 CWE-476<br>* line(s): 172,419 CWE-401<br>* line(s): 179 CWE-465<br>* line(s): 257,265 CWE-704<br>* line(s): 314 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199266"/>
    <file path="000/199/265/func_pointer_main.c" language="C" size="899" checksum="eae408b0ff67e42eb1cbc7c7350d8acefc1e0c9e"/>
    <file path="000/199/265/func_pointer.c" language="C" size="14149" checksum="a6604d3e60ee3d8fc5022a861857bade73411bfd">
      <flaw line="41" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="60" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="80" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="101" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="103" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="122" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="151" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="157" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="171" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="172" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="177" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="179" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="179" name="CWE-465: Pointer Issues"/>
      <flaw line="180" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="182" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="210" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="216" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="229" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="240" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="241" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="255" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="257" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="262" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="265" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="284" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="307" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="314" name="CWE-561: Dead Code"/>
      <flaw line="338" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="351" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="352" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="373" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="395" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="397" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="417" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="419" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="438" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="443" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="453" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="484" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="528" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="560" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="561" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="591" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="601" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199266" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 func_pointer.c func_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Bad cast of a function pointer<br>Description: Defect Free Code to identify false positives in bad cast of function pointer<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file func_pointer.c:<br>* line(s): 133,442 CWE-401<br>* line(s): 160,166,186,188,189,220,226,239,250,251,272,605,623 CWE-476<br>* line(s): 250 CWE-465<br>* line(s): 324,353 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199265"/>
    <file path="000/199/265/func_pointer_main.c" language="C" size="899" checksum="eae408b0ff67e42eb1cbc7c7350d8acefc1e0c9e"/>
    <file path="000/199/266/func_pointer.c" language="C" size="14955" checksum="f97103a943e9cf9c8bf4c1c6accabce195ea7087">
      <fix line="45" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="64" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="85" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="131" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="133" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="160" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="166" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="180" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="186" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="188" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="189" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="220" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="226" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="239" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="250" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="250" name="CWE-465: Pointer Issues"/>
      <flaw line="251" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="265" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="272" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="296" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="319" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="324" name="CWE-561: Dead Code"/>
      <flaw line="353" name="CWE-561: Dead Code"/>
      <fix line="362" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="388" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="438" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="442" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="479" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="511" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <fix line="555" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="605" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="617" name="CWE-704: Incorrect Type Conversion or Cast"/>
      <flaw line="623" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199267" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 function_return_value_unchecked.c function_return_value_unchecked_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Return value of function never checked<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file function_return_value_unchecked.c:<br>* line(s): 71,90,122,128,134,214,279,284,289,316,397 CWE-561<br>* line(s): 163,422 CWE-562<br>* line(s): 433 CWE-672<br>]]></description>
    <association type="pair" testcaseid="199268"/>
    <file path="000/199/267/function_return_value_unchecked_main.c" language="C" size="927" checksum="f223af8755509cacc0b63b85616ec9c5e0c336ea"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/267/function_return_value_unchecked.c" language="C" size="12108" checksum="ad360a4e4460c67ed2b0cedaddfd693dff67f79d">
      <flaw line="48" name="CWE-252: Unchecked Return Value"/>
      <flaw line="69" name="CWE-252: Unchecked Return Value"/>
      <flaw line="71" name="CWE-561: Dead Code"/>
      <flaw line="86" name="CWE-252: Unchecked Return Value"/>
      <flaw line="90" name="CWE-561: Dead Code"/>
      <flaw line="116" name="CWE-252: Unchecked Return Value"/>
      <flaw line="122" name="CWE-561: Dead Code"/>
      <flaw line="128" name="CWE-561: Dead Code"/>
      <flaw line="134" name="CWE-561: Dead Code"/>
      <flaw line="163" name="CWE-562: Return of Stack Variable Address"/>
      <flaw line="171" name="CWE-252: Unchecked Return Value"/>
      <flaw line="211" name="CWE-252: Unchecked Return Value"/>
      <flaw line="214" name="CWE-561: Dead Code"/>
      <flaw line="238" name="CWE-252: Unchecked Return Value"/>
      <flaw line="256" name="CWE-252: Unchecked Return Value"/>
      <flaw line="279" name="CWE-561: Dead Code"/>
      <flaw line="284" name="CWE-561: Dead Code"/>
      <flaw line="289" name="CWE-561: Dead Code"/>
      <flaw line="294" name="CWE-252: Unchecked Return Value"/>
      <flaw line="310" name="CWE-252: Unchecked Return Value"/>
      <flaw line="316" name="CWE-561: Dead Code"/>
      <flaw line="334" name="CWE-252: Unchecked Return Value"/>
      <flaw line="346" name="CWE-252: Unchecked Return Value"/>
      <flaw line="364" name="CWE-252: Unchecked Return Value"/>
      <flaw line="377" name="CWE-252: Unchecked Return Value"/>
      <flaw line="391" name="CWE-252: Unchecked Return Value"/>
      <flaw line="397" name="CWE-561: Dead Code"/>
      <flaw line="422" name="CWE-562: Return of Stack Variable Address"/>
      <flaw line="430" name="CWE-252: Unchecked Return Value"/>
      <flaw line="433" name="CWE-672: Operation on a Resource after Expiration or Release"/>
    </file>
  </testcase>
  <testcase id="199268" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 function_return_value_unchecked.c function_return_value_unchecked_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Return value of function never checked<br>Description: Defect Free Code to identify false positives of return value not checked scenarios<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file function_return_value_unchecked.c:<br>* line(s): 129,134,141,279,284,289,316,410 CWE-561<br>* line(s): 164,435 CWE-562<br>* line(s): 444 CWE-672<br>]]></description>
    <association type="pair" testcaseid="199267"/>
    <file path="000/199/268/function_return_value_unchecked.c" language="C" size="12483" checksum="158c3074f2e2cfedc40054fdbcb9f17cf83c5521">
      <fix line="48" name="CWE-252: Unchecked Return Value"/>
      <fix line="70" name="CWE-252: Unchecked Return Value"/>
      <fix line="87" name="CWE-252: Unchecked Return Value"/>
      <fix line="117" name="CWE-252: Unchecked Return Value"/>
      <flaw line="129" name="CWE-561: Dead Code"/>
      <flaw line="134" name="CWE-561: Dead Code"/>
      <flaw line="141" name="CWE-561: Dead Code"/>
      <flaw line="164" name="CWE-562: Return of Stack Variable Address"/>
      <fix line="172" name="CWE-252: Unchecked Return Value"/>
      <fix line="211" name="CWE-252: Unchecked Return Value"/>
      <fix line="238" name="CWE-252: Unchecked Return Value"/>
      <fix line="256" name="CWE-252: Unchecked Return Value"/>
      <flaw line="279" name="CWE-561: Dead Code"/>
      <flaw line="284" name="CWE-561: Dead Code"/>
      <flaw line="289" name="CWE-561: Dead Code"/>
      <fix line="294" name="CWE-252: Unchecked Return Value"/>
      <fix line="310" name="CWE-252: Unchecked Return Value"/>
      <flaw line="316" name="CWE-561: Dead Code"/>
      <fix line="334" name="CWE-252: Unchecked Return Value"/>
      <fix line="349" name="CWE-252: Unchecked Return Value"/>
      <fix line="370" name="CWE-252: Unchecked Return Value"/>
      <fix line="386" name="CWE-252: Unchecked Return Value"/>
      <fix line="403" name="CWE-252: Unchecked Return Value"/>
      <flaw line="410" name="CWE-561: Dead Code"/>
      <flaw line="435" name="CWE-562: Return of Stack Variable Address"/>
      <fix line="443" name="CWE-252: Unchecked Return Value"/>
      <flaw line="444" name="CWE-672: Operation on a Resource after Expiration or Release"/>
    </file>
    <file path="000/199/267/function_return_value_unchecked_main.c" language="C" size="927" checksum="f223af8755509cacc0b63b85616ec9c5e0c336ea"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199269" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 improper_termination_of_block.c improper_termination_of_block_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Improper termination of block<br>]]></description>
    <association type="pair" testcaseid="199270"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/269/improper_termination_of_block_main.c" language="C" size="916" checksum="486f02885e281702d59c18e5acd30fcf497e33bc"/>
    <file path="000/199/269/improper_termination_of_block.c" language="C" size="2045" checksum="b3927831d13c084953b3b9658334ee9270aaebca">
      <flaw line="22" name="CWE-483: Incorrect Block Delimitation"/>
      <flaw line="38" name="CWE-483: Incorrect Block Delimitation"/>
      <flaw line="52" name="CWE-483: Incorrect Block Delimitation"/>
      <flaw line="67" name="CWE-483: Incorrect Block Delimitation"/>
    </file>
  </testcase>
  <testcase id="199270" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 improper_termination_of_block.c improper_termination_of_block_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Improper termination of block<br>Description: Defect Free Code to identify false positives during improper termination of block<br>]]></description>
    <association type="pair" testcaseid="199269"/>
    <file path="000/199/270/improper_termination_of_block.c" language="C" size="2217" checksum="8bd8501e9bc93ecff485bb9f4f80769d4d5d3c71">
      <fix line="22" name="CWE-483: Incorrect Block Delimitation"/>
      <fix line="39" name="CWE-483: Incorrect Block Delimitation"/>
      <fix line="56" name="CWE-483: Incorrect Block Delimitation"/>
      <fix line="72" name="CWE-483: Incorrect Block Delimitation"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/269/improper_termination_of_block_main.c" language="C" size="916" checksum="486f02885e281702d59c18e5acd30fcf497e33bc"/>
  </testcase>
  <testcase id="199271" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 insign_code.c insign_code_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Useless assignment<br>]]></description>
    <association type="pair" testcaseid="199272"/>
    <file path="000/199/271/insign_code_main.c" language="C" size="888" checksum="58c8da57f45aef2bb3cb68f1608e81df312995fa"/>
    <file path="000/199/271/insign_code.c" language="C" size="592" checksum="bdd5e878c61f25ec1c80decc51dc996bcaed945a">
      <flaw line="24" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199272" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 insign_code.c insign_code_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Useless assignment<br>Description: Defect Free Code to identify false positives during useless assignment<br>]]></description>
    <association type="pair" testcaseid="199271"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/271/insign_code_main.c" language="C" size="888" checksum="58c8da57f45aef2bb3cb68f1608e81df312995fa"/>
    <file path="000/199/272/insign_code.c" language="C" size="779" checksum="4e745c330801a57de9e8fe138fb892904ad69270">
      <fix line="24" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
    </file>
  </testcase>
  <testcase id="199273" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 invalid_extern.c invalid_extern_main.c invalid_extern_1.c -lm -lpthread" author="Toyota ITC" numberOfFiles="4" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Bad extern type for global variable<br>]]></description>
    <association type="pair" testcaseid="199274"/>
    <file path="000/199/273/invalid_extern_main.c" language="C" size="903" checksum="7e1d75d4451c5f52f45fbefaec22abfdacf73e49"/>
    <file path="000/199/273/invalid_extern.c" language="C" size="2572" checksum="e9f1c0ef258d143d9fc2bb3fade0022f27664a8b">
      <flaw line="20" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="21" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="22" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="23" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="24" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="27" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
    </file>
    <file path="000/199/273/invalid_extern_1.c" language="C" size="654" checksum="fba4ba111e2981fda72192822e5294368706014d"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199274" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 invalid_extern.c invalid_extern_main.c invalid_extern_1.c -lm -lpthread" author="Toyota ITC" numberOfFiles="4" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Bad extern type for global variable<br>Description: Defect Free Code to identify false positives during invalid extern declaration<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file invalid_extern.c:<br>* line(s): 61 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199273"/>
    <file path="000/199/273/invalid_extern_main.c" language="C" size="903" checksum="7e1d75d4451c5f52f45fbefaec22abfdacf73e49"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/273/invalid_extern_1.c" language="C" size="654" checksum="fba4ba111e2981fda72192822e5294368706014d"/>
    <file path="000/199/274/invalid_extern.c" language="C" size="2762" checksum="af320cf74f7d7f54fa8532abacfc6203befabedc">
      <fix line="19" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="20" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="21" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="22" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="23" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="30" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="61" name="CWE-476: NULL Pointer Dereference"/>
    </file>
  </testcase>
  <testcase id="199275" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 invalid_memory_access.c invalid_memory_access_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Invalid memory access to already freed area<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file invalid_memory_access.c:<br>* line(s): 33,37,60,65,72 CWE-561<br>* line(s): 45,67,84,133,181,188,201,205,206,207,210,265,267,291,294,320,371,432,559,560,568,622 CWE-476<br>* line(s): 147 CWE-824<br>]]></description>
    <association type="pair" testcaseid="199276"/>
    <file path="000/199/275/invalid_memory_access.c" language="C" size="16455" checksum="8c8a488adb56cfdb08f0a2afd3052e1f1b9bc7f9">
      <flaw line="33" name="CWE-561: Dead Code"/>
      <flaw line="37" name="CWE-561: Dead Code"/>
      <flaw line="45" name="CWE-416: Use After Free"/>
      <flaw line="45" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="60" name="CWE-561: Dead Code"/>
      <flaw line="65" name="CWE-561: Dead Code"/>
      <flaw line="67" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="72" name="CWE-561: Dead Code"/>
      <flaw line="84" name="CWE-416: Use After Free"/>
      <flaw line="84" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="105" name="CWE-416: Use After Free"/>
      <flaw line="133" name="CWE-416: Use After Free"/>
      <flaw line="133" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="147" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="181" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="188" name="CWE-416: Use After Free"/>
      <flaw line="188" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="201" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="205" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="206" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="207" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="210" name="CWE-416: Use After Free"/>
      <flaw line="210" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="224" name="CWE-416: Use After Free"/>
      <flaw line="265" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="267" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="270" name="CWE-416: Use After Free"/>
      <flaw line="291" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="294" name="CWE-416: Use After Free"/>
      <flaw line="294" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="320" name="CWE-416: Use After Free"/>
      <flaw line="320" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="371" name="CWE-416: Use After Free"/>
      <flaw line="371" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="432" name="CWE-416: Use After Free"/>
      <flaw line="432" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="516" name="CWE-416: Use After Free"/>
      <flaw line="559" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="560" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="568" name="CWE-416: Use After Free"/>
      <flaw line="568" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="622" name="CWE-416: Use After Free"/>
      <flaw line="622" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="000/199/275/invalid_memory_access_main.c" language="C" size="901" checksum="23b7239cc5ff187fda1aa891003e2b576df205f2"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199276" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 invalid_memory_access.c invalid_memory_access_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Invalid memory access to already freed area<br>Description: Defect Free Code to identify false positives during invalid memory access<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file invalid_memory_access.c:<br>* line(s): 33,37,64 CWE-561<br>* line(s): 69,74,182,208,212,214,274,299,565,566,574,575,632,633 CWE-476<br>* line(s): 538 CWE-401<br>]]></description>
    <association type="pair" testcaseid="199275"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/275/invalid_memory_access_main.c" language="C" size="901" checksum="23b7239cc5ff187fda1aa891003e2b576df205f2"/>
    <file path="000/199/276/invalid_memory_access.c" language="C" size="17209" checksum="fbfe3c1e8aa00ff5848f58dcfbb3724374b7a1c8">
      <flaw line="33" name="CWE-561: Dead Code"/>
      <flaw line="37" name="CWE-561: Dead Code"/>
      <fix line="45" name="CWE-416: Use After Free"/>
      <flaw line="64" name="CWE-561: Dead Code"/>
      <flaw line="69" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="74" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="84" name="CWE-416: Use After Free"/>
      <fix line="107" name="CWE-416: Use After Free"/>
      <fix line="130" name="CWE-416: Use After Free"/>
      <flaw line="182" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="188" name="CWE-416: Use After Free"/>
      <flaw line="208" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="212" name="CWE-416: Use After Free"/>
      <flaw line="212" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="214" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="231" name="CWE-416: Use After Free"/>
      <fix line="274" name="CWE-416: Use After Free"/>
      <flaw line="274" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="299" name="CWE-416: Use After Free"/>
      <flaw line="299" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="319" name="CWE-416: Use After Free"/>
      <fix line="354" name="CWE-416: Use After Free"/>
      <fix line="415" name="CWE-416: Use After Free"/>
      <fix line="515" name="CWE-416: Use After Free"/>
      <flaw line="538" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="565" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="566" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="574" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="575" name="CWE-416: Use After Free"/>
      <flaw line="575" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="632" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="633" name="CWE-416: Use After Free"/>
      <flaw line="633" name="CWE-476: NULL Pointer Dereference"/>
    </file>
  </testcase>
  <testcase id="199277" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 littlemem_st.c littlemem_st_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Assign small buffer for structure<br>]]></description>
    <association type="pair" testcaseid="199278"/>
    <file path="000/199/277/littlemem_st_main.c" language="C" size="931" checksum="dcbb97aa02ff81e0ade49555b59d62e7603a8bb1"/>
    <file path="000/199/277/littlemem_st.c" language="C" size="8256" checksum="f0ad857d4563b1ca09bc36017824192ebdef1559">
      <flaw line="36" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="55" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="73" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="92" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="117" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="144" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="185" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="228" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="272" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="307" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <flaw line="343" name="CWE-131: Incorrect Calculation of Buffer Size"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199278" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 littlemem_st.c littlemem_st_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Assign small buffer for structure<br>Description: Defect Free Code to identify false positives in lesser static memory allocation<br>]]></description>
    <association type="pair" testcaseid="199277"/>
    <file path="000/199/277/littlemem_st_main.c" language="C" size="931" checksum="dcbb97aa02ff81e0ade49555b59d62e7603a8bb1"/>
    <file path="000/199/278/littlemem_st.c" language="C" size="8438" checksum="093bd74c18a3ce1efdc9550b506fa466a1c5519c">
      <fix line="36" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="55" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="73" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="92" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="117" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="144" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="185" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="228" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="272" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="307" name="CWE-131: Incorrect Calculation of Buffer Size"/>
      <fix line="343" name="CWE-131: Incorrect Calculation of Buffer Size"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199279" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 livelock.c livelock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Live lock<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file livelock.c:<br>* line(s): 31,49 CWE-190<br>]]></description>
    <association type="pair" testcaseid="199280"/>
    <file path="000/199/279/livelock.c" language="C" size="1377" checksum="61d3675207c0e5f74c2017d163d38f0431ce56be">
      <flaw line="31" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="32" name="CWE-764: Multiple Locks of a Critical Resource"/>
      <flaw line="49" name="CWE-190: Integer Overflow or Wraparound"/>
    </file>
    <file path="000/199/279/livelock_main.c" language="C" size="876" checksum="07492c1decadbbf198b44ef3448e50c156498687"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199280" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 livelock.c livelock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Live lock<br>Description: Defect Free Code to identify false positives in live lock - concurrency conditions<br>]]></description>
    <association type="pair" testcaseid="199279"/>
    <file path="000/199/280/livelock.c" language="C" size="1566" checksum="9a5a409ceef7787be54536cd2333374bb43e37b8">
      <fix line="32" name="CWE-764: Multiple Locks of a Critical Resource"/>
    </file>
    <file path="000/199/279/livelock_main.c" language="C" size="876" checksum="07492c1decadbbf198b44ef3448e50c156498687"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199281" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 lock_never_unlock.c lock_never_unlock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Locked but never unlock<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file lock_never_unlock.c:<br>* line(s): 151,208,227,305,324,367,392,445,469,521,545 CWE-843<br>]]></description>
    <association type="pair" testcaseid="199282"/>
    <file path="000/199/281/lock_never_unlock.c" language="C" size="17012" checksum="56db14da0a753f7531cd0ce3c8fbba5fabbb7a4a">
      <flaw line="47" name="CWE-667: Improper Locking"/>
      <flaw line="93" name="CWE-667: Improper Locking"/>
      <flaw line="151" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="155" name="CWE-667: Improper Locking"/>
      <flaw line="215" name="CWE-667: Improper Locking"/>
      <flaw line="208" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="227" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="270" name="CWE-667: Improper Locking"/>
      <flaw line="305" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="315" name="CWE-667: Improper Locking"/>
      <flaw line="324" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="367" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="392" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="403" name="CWE-667: Improper Locking"/>
      <flaw line="445" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="454" name="CWE-667: Improper Locking"/>
      <flaw line="469" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="521" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="545" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="556" name="CWE-667: Improper Locking"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/281/lock_never_unlock_main.c" language="C" size="901" checksum="8cf5b669cf6b087c8b247b4ffe3a13455ae242ff"/>
  </testcase>
  <testcase id="199282" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 lock_never_unlock.c lock_never_unlock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Locked but never unlock<br>Description: Defect Free Code to identify false positives while there has been a lock of a resource and never unlocked scenario<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file lock_never_unlock.c:<br>* line(s): 151,210,229,307,325,368,392,445,469,521,545 CWE-843<br>]]></description>
    <association type="pair" testcaseid="199281"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/281/lock_never_unlock_main.c" language="C" size="901" checksum="8cf5b669cf6b087c8b247b4ffe3a13455ae242ff"/>
    <file path="000/199/282/lock_never_unlock.c" language="C" size="17462" checksum="e50c92379d74dd334ee065c79a44237cfe047cef">
      <fix line="41" name="CWE-667: Improper Locking"/>
      <fix line="91" name="CWE-667: Improper Locking"/>
      <flaw line="151" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="155" name="CWE-667: Improper Locking"/>
      <flaw line="210" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="217" name="CWE-667: Improper Locking"/>
      <flaw line="229" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="267" name="CWE-667: Improper Locking"/>
      <flaw line="307" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="314" name="CWE-667: Improper Locking"/>
      <flaw line="325" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="368" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="392" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="403" name="CWE-667: Improper Locking"/>
      <flaw line="445" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="454" name="CWE-667: Improper Locking"/>
      <flaw line="469" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="521" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <flaw line="545" name="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')"/>
      <fix line="556" name="CWE-667: Improper Locking"/>
    </file>
  </testcase>
  <testcase id="199283" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 memory_allocation_failure.c memory_allocation_failure_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Memory allocation failure<br>Description: memory_allocation_failure -  Memory could not be allocated / insufficient memory<br>Created on: Oct 14, 2013<br>Author: hemalatha<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file memory_allocation_failure.c:<br>* line(s): 39 CWE-190<br>* line(s): 39,221,283,322 CWE-835<br>* line(s): 41,219,267,281,320 CWE-401<br>* line(s): 56,75,103,214,257,261,282,321,384,522,635 CWE-197<br>* line(s): 81,83,181,182,199,201,202,329,332,333,335,337,343,385,386,396,398,432,486,494,499,509,572,593,657,706 CWE-476<br>* line(s): 222 CWE-121<br>* line(s): 335,441,442,477,492,497,503,559,576,597,610,696 CWE-561<br>* line(s): 442,447 CWE-825<br>* line(s): 704,705 CWE-789<br>]]></description>
    <association type="pair" testcaseid="199284"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/283/memory_allocation_failure.c" language="C" size="19579" checksum="478812ab256ae74cb3650ff7d8928bed5561ec82">
      <flaw line="39" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="39" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="41" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="41" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="56" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="56" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="75" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="75" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="81" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="83" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="103" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="103" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="122" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="181" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="181" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="182" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="199" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="201" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="202" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="214" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="219" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="219" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="221" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="222" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="257" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="257" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="261" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="267" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="281" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="281" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="282" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="283" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="320" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="320" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="321" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="322" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="329" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="332" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="333" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="335" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="335" name="CWE-561: Dead Code"/>
      <flaw line="337" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="343" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="384" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="384" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="385" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="386" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="396" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="398" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="422" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="432" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="441" name="CWE-561: Dead Code"/>
      <flaw line="442" name="CWE-561: Dead Code"/>
      <flaw line="442" name="CWE-825: Expired Pointer Dereference"/>
      <flaw line="447" name="CWE-825: Expired Pointer Dereference"/>
      <flaw line="477" name="CWE-561: Dead Code"/>
      <flaw line="486" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="486" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="492" name="CWE-561: Dead Code"/>
      <flaw line="494" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="497" name="CWE-561: Dead Code"/>
      <flaw line="499" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="503" name="CWE-561: Dead Code"/>
      <flaw line="509" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="522" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="559" name="CWE-561: Dead Code"/>
      <flaw line="572" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="576" name="CWE-561: Dead Code"/>
      <flaw line="593" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="597" name="CWE-561: Dead Code"/>
      <flaw line="610" name="CWE-561: Dead Code"/>
      <flaw line="635" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="641" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="657" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="696" name="CWE-561: Dead Code"/>
      <flaw line="704" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="705" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="706" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="000/199/283/memory_allocation_failure_main.c" language="C" size="912" checksum="7c21dacd50d91942c9c9d1128b7403405d0b5735"/>
  </testcase>
  <testcase id="199284" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 memory_allocation_failure.c memory_allocation_failure_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Memory allocation failure<br>Description: Defect Free Code to identify false positives while memory_allocation_failure -  Memory could not be allocated / insufficient memory<br>Created on: Oct 14, 2013<br>Author: hemalatha<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file memory_allocation_failure.c:<br>* line(s): 83,85,184,185,202,204,205,339,342,343,345,347,353,394,395,405,407,441,589,610,674,723 CWE-476<br>* line(s): 224,277,291,330 CWE-401<br>* line(s): 227 CWE-835<br>* line(s): 229 CWE-121<br>* line(s): 345,450,451,576,593,614,627,713 CWE-561<br>* line(s): 451,456 CWE-825<br>* line(s): 721,722 CWE-789<br>]]></description>
    <association type="pair" testcaseid="199283"/>
    <file path="000/199/283/memory_allocation_failure_main.c" language="C" size="912" checksum="7c21dacd50d91942c9c9d1128b7403405d0b5735"/>
    <file path="000/199/284/memory_allocation_failure.c" language="C" size="19937" checksum="c05af446ebecc2f57809acf27eb2cc3522386292">
      <fix line="39" name="CWE-789: Uncontrolled Memory Allocation"/>
      <fix line="57" name="CWE-789: Uncontrolled Memory Allocation"/>
      <fix line="77" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="83" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="85" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="106" name="CWE-789: Uncontrolled Memory Allocation"/>
      <fix line="125" name="CWE-789: Uncontrolled Memory Allocation"/>
      <fix line="184" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="184" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="185" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="202" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="204" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="205" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="224" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="224" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="227" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="229" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="257" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="277" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="291" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="291" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="330" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="330" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="333" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="339" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="342" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="343" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="345" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="345" name="CWE-561: Dead Code"/>
      <flaw line="347" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="353" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="393" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="394" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="395" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="405" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="407" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="431" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="441" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="450" name="CWE-561: Dead Code"/>
      <flaw line="451" name="CWE-561: Dead Code"/>
      <flaw line="451" name="CWE-825: Expired Pointer Dereference"/>
      <flaw line="456" name="CWE-825: Expired Pointer Dereference"/>
      <flaw line="576" name="CWE-561: Dead Code"/>
      <flaw line="589" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="593" name="CWE-561: Dead Code"/>
      <flaw line="610" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="614" name="CWE-561: Dead Code"/>
      <flaw line="627" name="CWE-561: Dead Code"/>
      <fix line="658" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="674" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="713" name="CWE-561: Dead Code"/>
      <flaw line="721" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="722" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="723" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199285" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 memory_leak.c memory_leak_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Memory leakage<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file memory_leak.c:<br>* line(s): 23 CWE-835<br>* line(s): 23 CWE-190<br>* line(s): 25 CWE-789<br>* line(s): 46,52,73,96,249,311,349,354,424,449,455,504,517 CWE-476<br>* line(s): 119,150,199,467 CWE-561<br>* line(s): 232 CWE-197<br>]]></description>
    <association type="pair" testcaseid="199286"/>
    <file path="000/199/285/memory_leak_main.c" language="C" size="881" checksum="b1eb6ee815b739dd8191a5f2eca33bd9c187675e"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/285/memory_leak.c" language="C" size="12550" checksum="3df6a62eefa6af8ccca28cfd4311fa9a1c823e63">
      <flaw line="23" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="23" name="CWE-190: Integer Overflow or Wraparound"/>
      <flaw line="25" name="CWE-789: Uncontrolled Memory Allocation"/>
      <flaw line="25" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="46" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="52" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="55" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="73" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="73" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="96" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="98" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="119" name="CWE-561: Dead Code"/>
      <flaw line="120" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="150" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="150" name="CWE-561: Dead Code"/>
      <flaw line="199" name="CWE-561: Dead Code"/>
      <flaw line="203" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="215" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="231" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="232" name="CWE-197: Numeric Truncation Error"/>
      <flaw line="247" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="249" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="278" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="309" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="311" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="349" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="353" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="354" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="384" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="404" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="424" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="425" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="449" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="455" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="467" name="CWE-561: Dead Code"/>
      <flaw line="486" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="504" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="517" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="530" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
    </file>
  </testcase>
  <testcase id="199286" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 memory_leak.c memory_leak_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Memory leakage<br>Description: Defect Free Code to identify false positives in memory leak conditions<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file memory_leak.c:<br>* line(s): 46,53,55,75,99,101,359,430,456,462,512,525,531,532 CWE-476<br>* line(s): 235 CWE-197<br>* line(s): 474 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199285"/>
    <file path="000/199/286/memory_leak.c" language="C" size="12958" checksum="8c2ce64b33394d7563271ea64d9dd5d7926552cd">
      <fix line="25" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="46" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="53" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="55" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="55" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="75" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="76" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="99" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="101" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="101" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="120" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="150" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="203" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="213" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="230" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="235" name="CWE-197: Numeric Truncation Error"/>
      <fix line="247" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="280" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="318" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="349" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="359" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="387" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <fix line="408" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="430" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="431" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="456" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="462" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="474" name="CWE-561: Dead Code"/>
      <fix line="494" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="512" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="525" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="531" name="CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak')"/>
      <flaw line="531" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="532" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/285/memory_leak_main.c" language="C" size="881" checksum="b1eb6ee815b739dd8191a5f2eca33bd9c187675e"/>
  </testcase>
  <testcase id="199287" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 not_return.c not_return_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Non void function does not return value<br>]]></description>
    <association type="pair" testcaseid="199288"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/287/not_return_main.c" language="C" size="908" checksum="28c823691ae147d5a32e7660fe9e3fb5731938b3"/>
    <file path="000/199/287/not_return.c" language="C" size="2341" checksum="b896eb426e5d447945c9a7b4f1ec45fd67f5cfce">
      <flaw line="24" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="50" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="76" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="99" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
  </testcase>
  <testcase id="199288" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 not_return.c not_return_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Non void function does not return value<br>Description: Defect Free Code to identify false positives in conditions like having return value<br>]]></description>
    <association type="pair" testcaseid="199287"/>
    <file path="000/199/288/not_return.c" language="C" size="2516" checksum="002e576f18df96532a5921e6de5e4c5a06fb1977">
      <fix line="26" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="49" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="75" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="104" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/287/not_return_main.c" language="C" size="908" checksum="28c823691ae147d5a32e7660fe9e3fb5731938b3"/>
  </testcase>
  <testcase id="199289" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 null_pointer.c null_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Dereferencing a NULL pointer<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file null_pointer.c:<br>* line(s): 105 CWE-822<br>* line(s): 231,282,300,318 CWE-561<br>* line(s): 238 CWE-824<br>* line(s): 340,341 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199290"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/289/null_pointer_main.c" language="C" size="902" checksum="2ae5b00f6c0118a93bf8a54322febc05fcc02c34"/>
    <file path="000/199/289/null_pointer.c" language="C" size="8588" checksum="6c0c69d92cc881233ea3771dac7757d374daf7f7">
      <flaw line="23" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="34" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="47" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="63" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="94" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="105" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="105" name="CWE-822: Untrusted Pointer Dereference"/>
      <flaw line="117" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="133" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="142" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="159" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="173" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="180" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="196" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="213" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="231" name="CWE-561: Dead Code"/>
      <flaw line="238" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="238" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="282" name="CWE-561: Dead Code"/>
      <flaw line="300" name="CWE-561: Dead Code"/>
      <flaw line="318" name="CWE-561: Dead Code"/>
      <flaw line="334" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="340" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="341" name="CWE-476: NULL Pointer Dereference"/>
    </file>
  </testcase>
  <testcase id="199290" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 null_pointer.c null_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Dereferencing a NULL pointer<br>Description: Defect Free Code to identify false positives in deferencing Null Pointer<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file null_pointer.c:<br>* line(s): 258,284,290,340,359,360 CWE-476<br>* line(s): 303 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199289"/>
    <file path="000/199/290/null_pointer.c" language="C" size="9130" checksum="e5e7cbd5f8ca1a309f73919b7e39ca0adf0cd867">
      <fix line="24" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="36" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="50" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="67" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="99" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="111" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="123" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="141" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="150" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="169" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="184" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="195" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="215" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="233" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="258" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="258" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="284" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="290" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="303" name="CWE-561: Dead Code"/>
      <flaw line="340" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="353" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="359" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="360" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="000/199/289/null_pointer_main.c" language="C" size="902" checksum="2ae5b00f6c0118a93bf8a54322febc05fcc02c34"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199291" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 overrun_st.c overrun_st_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Static memory defects<br>Defect Sub-type: Static buffer overrun<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file overrun_st.c:<br>* line(s): 22,33,45,56,67,78,89,100,111,170,183,195,207,223,251,265,281,294,307,321,334,347,360,373,388,403,429,444,458,472,490,503,523,539,557,572,591,633,649,665,696,707 CWE-121<br>]]></description>
    <association type="pair" testcaseid="199292"/>
    <file path="000/199/291/overrun_st_main.c" language="C" size="902" checksum="19432d60043bb523236d8c5c79340e328bb37549"/>
    <file path="000/199/291/overrun_st.c" language="C" size="20946" checksum="859fcd34f6ed58a49a3259091cdab4657c72c127">
      <flaw line="21" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="22" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="32" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="33" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="44" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="45" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="55" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="56" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="66" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="67" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="77" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="78" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="88" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="89" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="99" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="100" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="110" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="111" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="126" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="142" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="158" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="169" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="170" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="182" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="183" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="194" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="195" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="206" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="207" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="222" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="223" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="233" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="250" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="251" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="264" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="265" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="280" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="281" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="293" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="294" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="306" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="307" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="320" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="321" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="333" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="334" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="346" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="347" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="359" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="360" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="372" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="373" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="387" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="388" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="402" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="403" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="415" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="428" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="429" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="443" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="444" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="457" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="458" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="471" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="472" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="489" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="490" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="502" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="503" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="522" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="523" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="538" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="539" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="556" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="557" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="570" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="572" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="588" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="591" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="613" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="631" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="633" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="642" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="649" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="658" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="665" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="674" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="689" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="696" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="706" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="707" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="724" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="739" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="749" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="761" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="773" name="CWE-121: Stack-based Buffer Overflow"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199292" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 overrun_st.c overrun_st_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Static memory defects<br>Defect Sub-type: Static buffer overrun<br>Description: Defect Free Code to identify false positives in static buffer overrun<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file overrun_st.c:<br>* line(s): 22,33,45,56,67,78,89,100,111,143,171,184,196,208,224,252,266,282,295,308,322,335,348,361,374,389,404,564,583,695,713,739,752 CWE-121<br>]]></description>
    <association type="pair" testcaseid="199291"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/291/overrun_st_main.c" language="C" size="902" checksum="19432d60043bb523236d8c5c79340e328bb37549"/>
    <file path="000/199/292/overrun_st.c" language="C" size="21477" checksum="368c253bddf0707babdb31bb8fd37b047dd1fc48">
      <fix line="21" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="22" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="32" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="33" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="44" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="45" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="55" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="56" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="66" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="67" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="77" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="78" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="88" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="89" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="99" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="100" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="110" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="111" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="126" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="142" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="143" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="159" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="170" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="171" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="183" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="184" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="195" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="196" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="207" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="208" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="223" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="224" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="234" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="251" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="252" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="265" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="266" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="281" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="282" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="294" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="295" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="307" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="308" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="321" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="322" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="334" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="335" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="347" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="348" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="360" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="361" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="373" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="374" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="388" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="389" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="403" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="404" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="416" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="429" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="443" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="469" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="486" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="498" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="517" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="532" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="549" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="562" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="564" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="580" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="583" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="605" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="623" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="633" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="648" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="663" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="678" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="694" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="695" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="712" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="713" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="728" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="738" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="739" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="751" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="752" name="CWE-121: Stack-based Buffer Overflow"/>
      <fix line="764" name="CWE-121: Stack-based Buffer Overflow"/>
    </file>
  </testcase>
  <testcase id="199293" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 ow_memcpy.c ow_memcpy_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Memory copy at overlapping areas<br>]]></description>
    <association type="pair" testcaseid="199294"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/293/ow_memcpy_main.c" language="C" size="895" checksum="a12737e786a4df53103f5ed7c0ca1d42982efbcf"/>
    <file path="000/199/293/ow_memcpy.c" language="C" size="1334" checksum="e23cf987e07a991e19e5c793554e9309cd31518b">
      <flaw line="24" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="41" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
  </testcase>
  <testcase id="199294" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 ow_memcpy.c ow_memcpy_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Dynamic memory defects<br>Defect Sub-type: Memory copy at overlapping areas<br>Description: Defect Free Code to identify false positives in memory copy at overlapping areas<br>]]></description>
    <association type="pair" testcaseid="199293"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/293/ow_memcpy_main.c" language="C" size="895" checksum="a12737e786a4df53103f5ed7c0ca1d42982efbcf"/>
    <file path="000/199/294/ow_memcpy.c" language="C" size="1452" checksum="63dc14423c4e60690fd67502786fc9a7ee0fb9b0">
      <fix line="24" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="41" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
  </testcase>
  <testcase id="199295" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 pow_related_errors.c pow_related_errors_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Power related errors<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file pow_related_errors.c:<br>* line(s): 154,155,157,158 CWE-476<br>* line(s): 161 CWE-189<br>]]></description>
    <association type="pair" testcaseid="199296"/>
    <file path="000/199/295/pow_related_errors.c" language="C" size="13433" checksum="23d6b3931982653afdaad13a7b26c91466109376">
      <flaw line="154" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="155" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="157" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="158" name="CWE-189: Numeric Errors"/>
      <flaw line="158" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="161" name="CWE-189: Numeric Errors"/>
      <flaw line="205" name="CWE-189: Numeric Errors"/>
      <flaw line="220" name="CWE-189: Numeric Errors"/>
      <flaw line="235" name="CWE-189: Numeric Errors"/>
      <flaw line="250" name="CWE-189: Numeric Errors"/>
      <flaw line="265" name="CWE-189: Numeric Errors"/>
      <flaw line="295" name="CWE-189: Numeric Errors"/>
      <flaw line="310" name="CWE-189: Numeric Errors"/>
      <flaw line="325" name="CWE-189: Numeric Errors"/>
      <flaw line="340" name="CWE-189: Numeric Errors"/>
      <flaw line="355" name="CWE-189: Numeric Errors"/>
      <flaw line="370" name="CWE-189: Numeric Errors"/>
      <flaw line="385" name="CWE-189: Numeric Errors"/>
      <flaw line="400" name="CWE-189: Numeric Errors"/>
      <flaw line="415" name="CWE-189: Numeric Errors"/>
      <flaw line="445" name="CWE-189: Numeric Errors"/>
      <flaw line="460" name="CWE-189: Numeric Errors"/>
      <flaw line="475" name="CWE-189: Numeric Errors"/>
      <flaw line="490" name="CWE-189: Numeric Errors"/>
    </file>
    <file path="000/199/295/pow_related_errors_main.c" language="C" size="896" checksum="6a318aca53643ec496117b59cc24f7c771ef181d"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199296" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 pow_related_errors.c pow_related_errors_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Power related errors<br>Description: Defect Free Code to identify false positives in power related errors<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file pow_related_errors.c:<br>* line(s): 149,150,151,152 CWE-476<br>* line(s): 302,318,362,377,467,482 CWE-189<br>]]></description>
    <association type="pair" testcaseid="199295"/>
    <file path="000/199/295/pow_related_errors_main.c" language="C" size="896" checksum="6a318aca53643ec496117b59cc24f7c771ef181d"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/296/pow_related_errors.c" language="C" size="13515" checksum="f5d741b37ac2748bffdb7edd431549871faf6f90">
      <flaw line="149" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="150" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="151" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="152" name="CWE-189: Numeric Errors"/>
      <flaw line="152" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="198" name="CWE-189: Numeric Errors"/>
      <fix line="212" name="CWE-189: Numeric Errors"/>
      <fix line="227" name="CWE-189: Numeric Errors"/>
      <fix line="242" name="CWE-189: Numeric Errors"/>
      <fix line="257" name="CWE-189: Numeric Errors"/>
      <fix line="297" name="CWE-189: Numeric Errors"/>
      <flaw line="302" name="CWE-189: Numeric Errors"/>
      <flaw line="318" name="CWE-189: Numeric Errors"/>
      <fix line="332" name="CWE-189: Numeric Errors"/>
      <fix line="347" name="CWE-189: Numeric Errors"/>
      <flaw line="362" name="CWE-189: Numeric Errors"/>
      <flaw line="377" name="CWE-189: Numeric Errors"/>
      <fix line="392" name="CWE-189: Numeric Errors"/>
      <fix line="407" name="CWE-189: Numeric Errors"/>
      <fix line="437" name="CWE-189: Numeric Errors"/>
      <fix line="453" name="CWE-189: Numeric Errors"/>
      <flaw line="467" name="CWE-189: Numeric Errors"/>
      <flaw line="482" name="CWE-189: Numeric Errors"/>
    </file>
  </testcase>
  <testcase id="199297" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 ptr_subtraction.c ptr_subtraction_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Incorrect pointer arithmetic<br>]]></description>
    <association type="pair" testcaseid="199298"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/297/ptr_subtraction.c" language="C" size="1120" checksum="4993bc7da2a1bf6e4a1bc843abcad9f156911988">
      <flaw line="22" name="CWE-469: Use of Pointer Subtraction to Determine Size"/>
      <flaw line="35" name="CWE-465: Pointer Issues"/>
    </file>
    <file path="000/199/297/ptr_subtraction_main.c" language="C" size="905" checksum="44c259cab009f87c1c5c323bbc212fe30b459377"/>
  </testcase>
  <testcase id="199298" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 ptr_subtraction.c ptr_subtraction_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Incorrect pointer arithmetic<br>Description: Defect Free Code to identify false positives in pointer arithmetic subtraction<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file ptr_subtraction.c:<br>* line(s): 22 CWE-469<br>]]></description>
    <association type="pair" testcaseid="199297"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/297/ptr_subtraction_main.c" language="C" size="905" checksum="44c259cab009f87c1c5c323bbc212fe30b459377"/>
    <file path="000/199/298/ptr_subtraction.c" language="C" size="1223" checksum="79aac4464ab353dece5f646ce8b9a8c38fdc0419">
      <flaw line="22" name="CWE-469: Use of Pointer Subtraction to Determine Size"/>
      <fix line="35" name="CWE-465: Pointer Issues"/>
    </file>
  </testcase>
  <testcase id="199299" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 race_condition.c race_condition_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Race condition<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file race_condition.c:<br>* line(s): 30,88,136,210,284,353 CWE-362<br>]]></description>
    <association type="pair" testcaseid="199300"/>
    <file path="000/199/299/race_condition.c" language="C" size="10344" checksum="7a075c3ab2ea33deb4e4544c7c4731e703d96605">
      <flaw line="24" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="30" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="60" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="88" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="93" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="136" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="139" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="154" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="210" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="214" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="268" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="284" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="333" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="353" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
    </file>
    <file path="000/199/299/race_condition_main.c" language="C" size="888" checksum="5ec9805e45653d89411415793a47c0bbb7e478e7"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199300" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 race_condition.c race_condition_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Race condition<br>Description: Defect Free Code to identify false positives in race condition<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file race_condition.c:<br>* line(s): 38,55 CWE-362<br>]]></description>
    <association type="pair" testcaseid="199299"/>
    <file path="000/199/300/race_condition.c" language="C" size="11297" checksum="2c7d5a6cbc5ed9089e82058c257444d6aa160525">
      <fix line="32" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="34" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="38" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="52" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <flaw line="55" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="93" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="95" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="152" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="155" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="180" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="211" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="264" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="268" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="322" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="333" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="382" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
      <fix line="402" name="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"/>
    </file>
    <file path="000/199/299/race_condition_main.c" language="C" size="888" checksum="5ec9805e45653d89411415793a47c0bbb7e478e7"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199301" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 redundant_cond.c redundant_cond_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Redundant conditions<br>]]></description>
    <association type="pair" testcaseid="199302"/>
    <file path="000/199/301/redundant_cond.c" language="C" size="5890" checksum="e1c98c2288d135ec9da31f936e2e43fefaf83b6f">
      <flaw line="26" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="45" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="64" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="83" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="102" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="123" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="143" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="158" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="177" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="197" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="217" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="237" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="257" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="282" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
    <file path="000/199/301/redundant_cond_main.c" language="C" size="892" checksum="ba99444ec48f85d76739c0e57844a75e6960328d"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199302" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 redundant_cond.c redundant_cond_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Redundant conditions<br>Description: Defect Free Code to identify false positives in redundant condition<br>]]></description>
    <association type="pair" testcaseid="199301"/>
    <file path="000/199/302/redundant_cond.c" language="C" size="5904" checksum="ebf0c67df657ebf9a26b14842fba7fda52771008">
      <fix line="26" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="45" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="64" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="83" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="121" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="141" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="156" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="195" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="280" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/301/redundant_cond_main.c" language="C" size="892" checksum="ba99444ec48f85d76739c0e57844a75e6960328d"/>
  </testcase>
  <testcase id="199303" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 return_local.c return_local_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Return of a pointer to a local variable<br>]]></description>
    <association type="pair" testcaseid="199304"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/303/return_local.c" language="C" size="1263" checksum="3a5cec379cdbd56fa404dee6db0960be3091a3dc">
      <flaw line="19" name="CWE-562: Return of Stack Variable Address"/>
      <flaw line="36" name="CWE-562: Return of Stack Variable Address"/>
    </file>
    <file path="000/199/303/return_local_main.c" language="C" size="905" checksum="19a0061503de79f0385fb16dec0f89df3ef1ca50"/>
  </testcase>
  <testcase id="199304" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 return_local.c return_local_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Return of a pointer to a local variable<br>Description: Defect Free Code to identify false positives in return of local variables<br>]]></description>
    <association type="pair" testcaseid="199303"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/304/return_local.c" language="C" size="1383" checksum="e2738f1eb20e2c8541eb53ebb529ea8f82a93a3d">
      <fix line="18" name="CWE-562: Return of Stack Variable Address"/>
      <fix line="36" name="CWE-562: Return of Stack Variable Address"/>
    </file>
    <file path="000/199/303/return_local_main.c" language="C" size="905" checksum="19a0061503de79f0385fb16dec0f89df3ef1ca50"/>
  </testcase>
  <testcase id="199305" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 sign_conv.c sign_conv_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Integer sign lost because of unsigned cast<br>]]></description>
    <association type="pair" testcaseid="199306"/>
    <file path="000/199/305/sign_conv_main.c" language="C" size="921" checksum="742853ecbb25c6cbcd23ff231061bc78f01f3fe1"/>
    <file path="000/199/305/sign_conv.c" language="C" size="8312" checksum="62b7dbcf536c6b19c8140333a3b69fad45bbb3bd">
      <flaw line="23" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="35" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="47" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="59" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="71" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="83" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="95" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="107" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="124" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="140" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="150" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="167" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="179" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="191" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="207" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="217" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="233" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="246" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <flaw line="262" name="CWE-196: Unsigned to Signed Conversion Error"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199306" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 sign_conv.c sign_conv_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Integer sign lost because of unsigned cast<br>Description: Defect Free Code to identify false positives in losing sign due to cast<br>]]></description>
    <association type="pair" testcaseid="199305"/>
    <file path="000/199/306/sign_conv.c" language="C" size="8293" checksum="a60593c8ff8fa554b342d39e55e48249c7f20a1a">
      <fix line="23" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="35" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="47" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="59" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="71" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="83" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="95" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="107" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="124" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="140" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="150" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="166" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="178" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="190" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="206" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="216" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="232" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="245" name="CWE-196: Unsigned to Signed Conversion Error"/>
      <fix line="261" name="CWE-196: Unsigned to Signed Conversion Error"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/305/sign_conv_main.c" language="C" size="921" checksum="742853ecbb25c6cbcd23ff231061bc78f01f3fe1"/>
  </testcase>
  <testcase id="199307" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 sleep_lock.c sleep_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Long lock<br>]]></description>
    <association type="pair" testcaseid="199308"/>
    <file path="000/199/307/sleep_lock_main.c" language="C" size="879" checksum="9ab2f634a587f4774591ae9b8eb56b3dae701137"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/307/sleep_lock.c" language="C" size="4860" checksum="5765c0dae2187236e87185177de1d71cdeae4612">
      <flaw line="50" name="CWE-662: Improper Synchronization"/>
      <flaw line="124" name="CWE-662: Improper Synchronization"/>
      <flaw line="173" name="CWE-662: Improper Synchronization"/>
    </file>
  </testcase>
  <testcase id="199308" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 sleep_lock.c sleep_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Long lock<br>Description: Defect Free Code to identify false positives of long lock conditions<br>]]></description>
    <association type="pair" testcaseid="199307"/>
    <file path="000/199/308/sleep_lock.c" language="C" size="3836" checksum="24b8645a518234ce069dfc710df73718d2cabd97"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/307/sleep_lock_main.c" language="C" size="879" checksum="9ab2f634a587f4774591ae9b8eb56b3dae701137"/>
  </testcase>
  <testcase id="199309" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 st_cross_thread_access.c st_cross_thread_access_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Stack related defects<br>Defect Sub-type: Cross thread stack access<br>]]></description>
    <association type="pair" testcaseid="199310"/>
    <file path="000/199/309/st_cross_thread_access.c" language="C" size="17502" checksum="f1c7b8fbcbcef5d03bf4e8a5f7c6c8c0c3c004c7">
      <flaw line="64" name="CWE-672: Operation on a Resource after Expiration or Release"/>
      <flaw line="153" name="CWE-672: Operation on a Resource after Expiration or Release"/>
      <flaw line="251" name="CWE-672: Operation on a Resource after Expiration or Release"/>
      <flaw line="335" name="CWE-672: Operation on a Resource after Expiration or Release"/>
      <flaw line="411" name="CWE-672: Operation on a Resource after Expiration or Release"/>
      <flaw line="498" name="CWE-672: Operation on a Resource after Expiration or Release"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/309/st_cross_thread_access_main.c" language="C" size="903" checksum="f5c91687416476eb8e408c6954929687337ce091"/>
  </testcase>
  <testcase id="199310" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 st_cross_thread_access.c st_cross_thread_access_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Stack related defects<br>Defect Sub-type: Cross thread stack access<br>Description: Defect Free Code to identify false positives in cross thread access<br>]]></description>
    <association type="pair" testcaseid="199309"/>
    <file path="000/199/310/st_cross_thread_access.c" language="C" size="17563" checksum="f0b7e474d1d705d9b92a8a949392d11fe103f5b1"/>
    <file path="000/199/309/st_cross_thread_access_main.c" language="C" size="903" checksum="f5c91687416476eb8e408c6954929687337ce091"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199311" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 st_overflow.c st_overflow_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Stack related defects<br>Defect Sub-type: Stack overflow<br>]]></description>
    <association type="pair" testcaseid="199312"/>
    <file path="000/199/311/st_overflow.c" language="C" size="6330" checksum="8a6d755cfa239200a4f4a23a912c14bc907f6fcc">
      <flaw line="21" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="32" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="76" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="115" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="133" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="166" name="CWE-398: Indicator of Poor Code Quality"/>
      <flaw line="198" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/311/st_overflow_main.c" language="C" size="884" checksum="9107184bc5ca02d9fb8bb86846900c3420c93de5"/>
  </testcase>
  <testcase id="199312" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 st_overflow.c st_overflow_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Stack related defects<br>Defect Sub-type: Stack overflow<br>Description: Defect Free Code to identify false positives in stack overflow conditions<br>]]></description>
    <association type="pair" testcaseid="199311"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/311/st_overflow_main.c" language="C" size="884" checksum="9107184bc5ca02d9fb8bb86846900c3420c93de5"/>
    <file path="000/199/312/st_overflow.c" language="C" size="6610" checksum="45b9cde82ae6027eda3d734073fd358fd3d5c729">
      <fix line="22" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="43" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="71" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="100" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="136" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="173" name="CWE-398: Indicator of Poor Code Quality"/>
      <fix line="205" name="CWE-398: Indicator of Poor Code Quality"/>
    </file>
  </testcase>
  <testcase id="199313" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 st_underrun.c st_underrun_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Stack related defects<br>Defect Sub-type: Stack underrun<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file st_underrun.c:<br>* line(s): 25,51,92,130,150,193 CWE-835<br>* line(s): 193,195,204 CWE-121<br>* line(s): 195,227 CWE-124<br>* line(s): 247 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199314"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/313/st_underrun.c" language="C" size="5704" checksum="da9a8f217856c8332a2ed0434388addca314c115">
      <flaw line="25" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="25" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="51" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="51" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="92" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="92" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="130" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="130" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="150" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="160" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="193" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="193" name="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')"/>
      <flaw line="193" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="195" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="195" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="204" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="227" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="229" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="247" name="CWE-561: Dead Code"/>
    </file>
    <file path="000/199/313/st_underrun_main.c" language="C" size="892" checksum="73c56be4ad097b45d304395554a94fbe8fd682aa"/>
  </testcase>
  <testcase id="199314" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 st_underrun.c st_underrun_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Stack related defects<br>Defect Sub-type: Stack underrun<br>Description: Defect Free Code to identify false positives in stack underrun conditions<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file st_underrun.c:<br>* line(s): 51,235,237 CWE-124<br>* line(s): 212 CWE-121<br>]]></description>
    <association type="pair" testcaseid="199313"/>
    <file path="000/199/313/st_underrun_main.c" language="C" size="892" checksum="73c56be4ad097b45d304395554a94fbe8fd682aa"/>
    <file path="000/199/314/st_underrun.c" language="C" size="6143" checksum="86b29787ead93c872c14959e53513e74379b183a">
      <fix line="25" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="51" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="92" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="130" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="151" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="212" name="CWE-121: Stack-based Buffer Overflow"/>
      <flaw line="235" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="237" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199315" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 underrun_st.c underrun_st_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Static memory defects<br>Defect Sub-type: Static buffer underrun<br>]]></description>
    <association type="pair" testcaseid="199316"/>
    <file path="000/199/315/underrun_st_main.c" language="C" size="904" checksum="8e520b5a23f4c6ce4506009b9efebcc36643a352"/>
    <file path="000/199/315/underrun_st.c" language="C" size="5048" checksum="6c3916054ad62d9bf70063eb21de4871aea9e21e">
      <flaw line="21" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="31" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="42" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="55" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="67" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="80" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="93" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="109" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="124" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="140" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="155" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="172" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <flaw line="190" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199316" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 underrun_st.c underrun_st_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Static memory defects<br>Defect Sub-type: Static buffer underrun<br>Description: Defect Free Code to identify false positives in stack underun condition<br>]]></description>
    <association type="pair" testcaseid="199315"/>
    <file path="000/199/315/underrun_st_main.c" language="C" size="904" checksum="8e520b5a23f4c6ce4506009b9efebcc36643a352"/>
    <file path="000/199/316/underrun_st.c" language="C" size="5340" checksum="e9df3107d987921d76883fdbd42972bb0422ffeb">
      <fix line="21" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="32" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="44" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="58" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="71" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="84" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="97" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="114" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="129" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="145" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="160" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="177" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
      <fix line="195" name="CWE-124: Buffer Underwrite ('Buffer Underflow')"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199317" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 uninit_memory_access.c uninit_memory_access_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Uninitialized memory access<br>Description: Defect Code to identify access to memory locations which are uninitialized<br>Created on: Sep 26, 2013<br>Author: hemalatha<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file uninit_memory_access.c:<br>* line(s): 53,113,115 CWE-824<br>* line(s): 115,119,127,199,223,248,250,251,362,363,366,368,391,397,403,434,439 CWE-476<br>* line(s): 403 CWE-465<br>* line(s): 434 CWE-457<br>]]></description>
    <association type="pair" testcaseid="199318"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/317/uninit_memory_access_main.c" language="C" size="899" checksum="db6ac4c5d512f24b50cadd1f744b7f593f6ea42a"/>
    <file path="000/199/317/uninit_memory_access.c" language="C" size="12407" checksum="da440acc31f014c38b63ba348bd7be7a8f7fc2fa">
      <flaw line="26" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="38" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="53" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="54" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="73" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="73" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="97" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="113" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="115" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="115" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="119" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="127" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="127" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="154" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="199" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="199" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="223" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="248" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="248" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="250" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="251" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="297" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="312" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="338" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="362" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="363" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="366" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="368" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="368" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="391" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="397" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="403" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="403" name="CWE-465: Pointer Issues"/>
      <flaw line="434" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="434" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="439" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="439" name="CWE-476: NULL Pointer Dereference"/>
    </file>
  </testcase>
  <testcase id="199318" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 uninit_memory_access.c uninit_memory_access_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Resource management defects<br>Defect Sub-type: Uninitialized memory access<br>Description: Defect Free Code to identify false positives to identify access to memory locations which are uninitialized<br>Created on: Sep 26, 2013<br>Author: hemalatha<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file uninit_memory_access.c:<br>* line(s): 75,117,121,129,235,241,260,262,263,376,377,378,381,383,408,455,460 CWE-476<br>* line(s): 413,419,424 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199317"/>
    <file path="000/199/317/uninit_memory_access_main.c" language="C" size="899" checksum="db6ac4c5d512f24b50cadd1f744b7f593f6ea42a"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/318/uninit_memory_access.c" language="C" size="12836" checksum="a41e08c619cb56dc2e32023a04f6289ccdf7f610">
      <fix line="26" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="39" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="55" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="75" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="75" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="99" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="117" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="121" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="129" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="129" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="156" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="209" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="235" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="241" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="260" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="260" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="262" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="263" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="309" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="324" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="352" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="376" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="377" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="378" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="381" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="383" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="383" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="408" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="413" name="CWE-561: Dead Code"/>
      <flaw line="419" name="CWE-561: Dead Code"/>
      <flaw line="424" name="CWE-561: Dead Code"/>
      <flaw line="455" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="460" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="460" name="CWE-476: NULL Pointer Dereference"/>
    </file>
  </testcase>
  <testcase id="199319" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 uninit_pointer.c uninit_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Uninitialized pointer<br>Description: Defect Code to identify uninitialized pointer access in the code flow<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file uninit_pointer.c:<br>* line(s): 182 CWE-824<br>* line(s): 186,267,276,278,279,382,384 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199320"/>
    <file path="000/199/319/uninit_pointer.c" language="C" size="9851" checksum="4087766f16ee50b4b8ffb8faa5f0cf9bdc848344">
      <flaw line="29" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="40" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="54" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="89" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="103" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="130" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="151" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="182" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="186" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="186" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="199" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="230" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="253" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="267" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="276" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="278" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="279" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="334" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="351" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="382" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="384" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="405" name="CWE-824: Access of Uninitialized Pointer"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/319/uninit_pointer_main.c" language="C" size="894" checksum="4b31a0526c1327ffbc457be933d282ecde7e7867"/>
  </testcase>
  <testcase id="199320" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 uninit_pointer.c uninit_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Uninitialized pointer<br>Description: Defect Free Code to identify false positives to identify uninitialized pointer access in the code flow<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file uninit_pointer.c:<br>* line(s): 279,288,290,291,398,399 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199319"/>
    <file path="000/199/319/uninit_pointer_main.c" language="C" size="894" checksum="4b31a0526c1327ffbc457be933d282ecde7e7867"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/320/uninit_pointer.c" language="C" size="10567" checksum="a10894cba775ca9ac1b3ee1cf2eb26ee84daaabc">
      <fix line="29" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="41" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="56" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="94" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="110" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="137" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="160" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="196" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="209" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="242" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="265" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="279" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="288" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="290" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="291" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="348" name="CWE-824: Access of Uninitialized Pointer"/>
      <fix line="367" name="CWE-824: Access of Uninitialized Pointer"/>
      <flaw line="398" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="399" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="422" name="CWE-824: Access of Uninitialized Pointer"/>
    </file>
  </testcase>
  <testcase id="199321" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 uninit_var.c uninit_var_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Uninitialized variable<br>Description: Defect code to identify uninitialized variable in a code flow<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file uninit_var.c:<br>* line(s): 57,59,73 CWE-561<br>* line(s): 120,176 CWE-457<br>]]></description>
    <association type="pair" testcaseid="199322"/>
    <file path="000/199/321/uninit_var.c" language="C" size="7252" checksum="867fa201e95381c3a6158635a5fb0a91e7edf49a">
      <flaw line="22" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="33" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="44" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="57" name="CWE-561: Dead Code"/>
      <flaw line="59" name="CWE-561: Dead Code"/>
      <flaw line="62" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="73" name="CWE-561: Dead Code"/>
      <flaw line="74" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="91" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="110" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="120" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="130" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="141" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="160" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="176" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="177" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="200" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="242" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="266" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="295" name="CWE-457: Use of Uninitialized Variable"/>
    </file>
    <file path="000/199/321/uninit_var_main.c" language="C" size="891" checksum="8a97aec62ba7b7e5e04306d06df3d9beaae1f3d3"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199322" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 uninit_var.c uninit_var_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Misc defects<br>Defect Sub-type: Uninitialized variable<br>Description: Defect Free Code to identify false positives to identify uninitialized variable in a code flow<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file uninit_var.c:<br>* line(s): 66,68 CWE-561<br>* line(s): 140 CWE-457<br>]]></description>
    <association type="pair" testcaseid="199321"/>
    <file path="000/199/321/uninit_var_main.c" language="C" size="891" checksum="8a97aec62ba7b7e5e04306d06df3d9beaae1f3d3"/>
    <file path="000/199/322/uninit_var.c" language="C" size="8064" checksum="89bd5990e108fcd21e73501f13738bc9d45109bb">
      <fix line="22" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="34" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="50" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="66" name="CWE-561: Dead Code"/>
      <flaw line="68" name="CWE-561: Dead Code"/>
      <fix line="69" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="81" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="99" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="119" name="CWE-457: Use of Uninitialized Variable"/>
      <flaw line="140" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="151" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="174" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="192" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="216" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="261" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="286" name="CWE-457: Use of Uninitialized Variable"/>
      <fix line="318" name="CWE-457: Use of Uninitialized Variable"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199323" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 unlock_without_lock.c unlock_without_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Unlock without lock<br>Description: Defect Code to identify if a shared resource is unlocked without preceeding lock<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file unlock_without_lock.c:<br>* line(s): 43,104,279,372 CWE-413<br>]]></description>
    <association type="pair" testcaseid="199324"/>
    <file path="000/199/323/unlock_without_lock.c" language="C" size="17221" checksum="65712109b21d741b61d937f56cebfb6ef1468baf">
      <flaw line="43" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <flaw line="43" name="CWE-413: Improper Resource Locking"/>
      <flaw line="104" name="CWE-413: Improper Resource Locking"/>
      <flaw line="109" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <flaw line="201" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <flaw line="278" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <flaw line="279" name="CWE-413: Improper Resource Locking"/>
      <flaw line="324" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <flaw line="371" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <flaw line="372" name="CWE-413: Improper Resource Locking"/>
      <flaw line="471" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <flaw line="543" name="CWE-832: Unlock of a Resource that is not Locked"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/323/unlock_without_lock_main.c" language="C" size="900" checksum="8f38d0a2fe945e9b5d7c2e91a3f5e5f7b0a6a8ef"/>
  </testcase>
  <testcase id="199324" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 unlock_without_lock.c unlock_without_lock_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Concurrency defects<br>Defect Sub-type: Unlock without lock<br>Description: Defect Free Code to identify false positives to identify if a shared resource is unlocked without preceeding lock<br>]]></description>
    <association type="pair" testcaseid="199323"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/323/unlock_without_lock_main.c" language="C" size="900" checksum="8f38d0a2fe945e9b5d7c2e91a3f5e5f7b0a6a8ef"/>
    <file path="000/199/324/unlock_without_lock.c" language="C" size="17321" checksum="ba1a0812b9d7c9b78c3e4967cc05a5578f5cf0ce">
      <fix line="43" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <fix line="109" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <fix line="197" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <fix line="278" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <fix line="324" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <fix line="371" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <fix line="471" name="CWE-832: Unlock of a Resource that is not Locked"/>
      <fix line="543" name="CWE-832: Unlock of a Resource that is not Locked"/>
    </file>
  </testcase>
  <testcase id="199325" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 unused_var.c unused_var_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Unused variable<br>Description: Defect Code to identify the unused variable in a function<br>]]></description>
    <association type="pair" testcaseid="199326"/>
    <file path="000/199/325/unused_var.c" language="C" size="3722" checksum="517d95b6e2f6e6f4511ef484510436c4ad41bc3e">
      <flaw line="23" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <flaw line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <flaw line="77" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <flaw line="90" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <flaw line="103" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <flaw line="117" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <flaw line="151" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
    </file>
    <file path="000/199/325/unused_var_main.c" language="C" size="884" checksum="8ba5653c71839219b57b4001ac8ef00cf0847f16"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199326" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 unused_var.c unused_var_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Inappropriate code<br>Defect Sub-type: Unused variable<br>Description: Defect Free Code to identify false positives to identify the unused variable in a function<br>]]></description>
    <association type="pair" testcaseid="199325"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/325/unused_var_main.c" language="C" size="884" checksum="8ba5653c71839219b57b4001ac8ef00cf0847f16"/>
    <file path="000/199/326/unused_var.c" language="C" size="4099" checksum="93d8fbbe15f4de8deaed622d09e7b7c090083da4">
      <fix line="23" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <fix line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <fix line="79" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <fix line="93" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <fix line="107" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <fix line="122" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
      <fix line="157" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"/>
    </file>
  </testcase>
  <testcase id="199327" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 wrong_arguments_func_pointer.c wrong_arguments_func_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Comparison NULL with function pointer<br>Description: Defect Code to identify the wrong arguments fed into a function pointer<br>Created on: Oct 8, 2013<br>Author: hemalatha<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file wrong_arguments_func_pointer.c:<br>* line(s): 331,438,450,461,462,592 CWE-476<br>* line(s): 521 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199328"/>
    <file path="000/199/327/wrong_arguments_func_pointer_main.c" language="C" size="930" checksum="c5a9aac226936adf3a918b6f7962b31466f8638b"/>
    <file path="000/199/327/wrong_arguments_func_pointer.c" language="C" size="19299" checksum="d5bc8a4f060f6d33677d068e7f08dfdb445c8219">
      <flaw line="52" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="73" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="93" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="113" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="140" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="160" name="CWE-685: Function Call With Incorrect Number of Arguments"/>
      <flaw line="181" name="CWE-685: Function Call With Incorrect Number of Arguments"/>
      <flaw line="200" name="CWE-628: Function Call with Incorrectly Specified Arguments"/>
      <flaw line="224" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="249" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="297" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="331" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="353" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="380" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="422" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="438" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="450" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="456" name="CWE-685: Function Call With Incorrect Number of Arguments"/>
      <flaw line="461" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="462" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="490" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="521" name="CWE-561: Dead Code"/>
      <flaw line="527" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="592" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
  </testcase>
  <testcase id="199328" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 wrong_arguments_func_pointer.c wrong_arguments_func_pointer_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Pointer related defects<br>Defect Sub-type: Comparison NULL with function pointer<br>Description: Defect Free Code to identify false positives to identify the wrong arguments fed into a function pointer<br>Created on: Oct 8, 2013<br>Author: hemalatha<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file wrong_arguments_func_pointer.c:<br>* line(s): 434,446,457,458,587 CWE-476<br>* line(s): 518 CWE-561<br>]]></description>
    <association type="pair" testcaseid="199327"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/328/wrong_arguments_func_pointer.c" language="C" size="19276" checksum="371b5e8e85a097dfe45fcda4809e187d3aec87a5">
      <fix line="52" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="73" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="93" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="113" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="138" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="157" name="CWE-685: Function Call With Incorrect Number of Arguments"/>
      <fix line="177" name="CWE-685: Function Call With Incorrect Number of Arguments"/>
      <fix line="196" name="CWE-628: Function Call with Incorrectly Specified Arguments"/>
      <fix line="223" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="252" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="297" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="350" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="379" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <fix line="419" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="434" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="446" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="452" name="CWE-685: Function Call With Incorrect Number of Arguments"/>
      <flaw line="457" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="458" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="486" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="518" name="CWE-561: Dead Code"/>
      <fix line="524" name="CWE-686: Function Call With Incorrect Argument Type"/>
      <flaw line="587" name="CWE-476: NULL Pointer Dereference"/>
    </file>
    <file path="000/199/327/wrong_arguments_func_pointer_main.c" language="C" size="930" checksum="c5a9aac226936adf3a918b6f7962b31466f8638b"/>
  </testcase>
  <testcase id="199329" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 zero_division.c zero_division_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Division by zero<br>Description: Defect Code used to identify the division by zero functionality<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file zero_division.c:<br>* line(s): 235,239,249 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199330"/>
    <file path="000/199/329/zero_division.c" language="C" size="6977" checksum="aeb6c70180e20e981b5c7ebf31d3385e6bfd2d7e">
      <flaw line="22" name="CWE-369: Divide By Zero"/>
      <flaw line="33" name="CWE-369: Divide By Zero"/>
      <flaw line="46" name="CWE-369: Divide By Zero"/>
      <flaw line="58" name="CWE-369: Divide By Zero"/>
      <flaw line="77" name="CWE-369: Divide By Zero"/>
      <flaw line="92" name="CWE-369: Divide By Zero"/>
      <flaw line="117" name="CWE-369: Divide By Zero"/>
      <flaw line="128" name="CWE-369: Divide By Zero"/>
      <flaw line="140" name="CWE-369: Divide By Zero"/>
      <flaw line="153" name="CWE-369: Divide By Zero"/>
      <flaw line="165" name="CWE-369: Divide By Zero"/>
      <flaw line="177" name="CWE-369: Divide By Zero"/>
      <flaw line="194" name="CWE-369: Divide By Zero"/>
      <flaw line="205" name="CWE-369: Divide By Zero"/>
      <flaw line="224" name="CWE-369: Divide By Zero"/>
      <flaw line="235" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="239" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="249" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="251" name="CWE-369: Divide By Zero"/>
    </file>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/329/zero_division_main.c" language="C" size="928" checksum="4757223e3f58ed1b440cca0bc947423b7d2a7db6"/>
  </testcase>
  <testcase id="199330" type="Source Code" status="Candidate" submissionDate="2016-07-22" language="C" instruction="gcc -Wall -I ../../../shared/104 zero_division.c zero_division_main.c -lm -lpthread" author="Toyota ITC" numberOfFiles="3" testsuiteid="104">
    <description><![CDATA[Defect Type: Numerical defects<br>Defect Sub-type: Division by zero<br>Description: Defect Free Code to identify false positives to identify the division by zero functionality<br><br>The test case contains coincidental weaknesses along with intended ones as follows for file zero_division.c:<br>* line(s): 236,240,250 CWE-476<br>]]></description>
    <association type="pair" testcaseid="199329"/>
    <file path="000/199/329/zero_division_main.c" language="C" size="928" checksum="4757223e3f58ed1b440cca0bc947423b7d2a7db6"/>
    <file path="shared/104/HeaderFile.h" language="C" size="2062" checksum="387298558c4b4a480210dccb75dd88da6f450a23"/>
    <file path="000/199/330/zero_division.c" language="C" size="7176" checksum="dbedee2b98a625ccfa0082802c755de8eb2752f6">
      <fix line="22" name="CWE-369: Divide By Zero"/>
      <fix line="33" name="CWE-369: Divide By Zero"/>
      <fix line="45" name="CWE-369: Divide By Zero"/>
      <fix line="56" name="CWE-369: Divide By Zero"/>
      <fix line="75" name="CWE-369: Divide By Zero"/>
      <fix line="90" name="CWE-369: Divide By Zero"/>
      <fix line="115" name="CWE-369: Divide By Zero"/>
      <fix line="126" name="CWE-369: Divide By Zero"/>
      <fix line="138" name="CWE-369: Divide By Zero"/>
      <fix line="153" name="CWE-369: Divide By Zero"/>
      <fix line="166" name="CWE-369: Divide By Zero"/>
      <fix line="178" name="CWE-369: Divide By Zero"/>
      <fix line="195" name="CWE-369: Divide By Zero"/>
      <fix line="206" name="CWE-369: Divide By Zero"/>
      <fix line="225" name="CWE-369: Divide By Zero"/>
      <flaw line="236" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="240" name="CWE-476: NULL Pointer Dereference"/>
      <flaw line="250" name="CWE-476: NULL Pointer Dereference"/>
      <fix line="252" name="CWE-369: Divide By Zero"/>
    </file>
  </testcase>
</container>
